/* soy.h generated by valac 0.20.1, the Vala compiler, do not modify */


#ifndef __SOY_H__
#define __SOY_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <float.h>
#include <math.h>
#include <GLES/gl.h>
#include <GLES/glext.h>
#include <soy-1/ode.h>
#include <loudmouth/loudmouth.h>
#include <agent.h>
#include <nice/agent.h>
#include <cairo.h>

G_BEGIN_DECLS


#define SOY_MATERIALS_TYPE_MATERIAL (soy_materials_material_get_type ())
#define SOY_MATERIALS_MATERIAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_MATERIALS_TYPE_MATERIAL, soymaterialsMaterial))
#define SOY_MATERIALS_MATERIAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_MATERIALS_TYPE_MATERIAL, soymaterialsMaterialClass))
#define SOY_MATERIALS_IS_MATERIAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_MATERIALS_TYPE_MATERIAL))
#define SOY_MATERIALS_IS_MATERIAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_MATERIALS_TYPE_MATERIAL))
#define SOY_MATERIALS_MATERIAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_MATERIALS_TYPE_MATERIAL, soymaterialsMaterialClass))

typedef struct _soymaterialsMaterial soymaterialsMaterial;
typedef struct _soymaterialsMaterialClass soymaterialsMaterialClass;

#define SOY_ATOMS_TYPE_AREA (soy_atoms_area_get_type ())
#define SOY_ATOMS_AREA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_ATOMS_TYPE_AREA, soyatomsArea))
#define SOY_ATOMS_AREA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_ATOMS_TYPE_AREA, soyatomsAreaClass))
#define SOY_ATOMS_IS_AREA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_ATOMS_TYPE_AREA))
#define SOY_ATOMS_IS_AREA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_ATOMS_TYPE_AREA))
#define SOY_ATOMS_AREA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_ATOMS_TYPE_AREA, soyatomsAreaClass))

typedef struct _soyatomsArea soyatomsArea;
typedef struct _soyatomsAreaClass soyatomsAreaClass;
typedef struct _soyatomsAreaPrivate soyatomsAreaPrivate;

#define SOY_ATOMS_TYPE_AXIS (soy_atoms_axis_get_type ())
#define SOY_ATOMS_AXIS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_ATOMS_TYPE_AXIS, soyatomsAxis))
#define SOY_ATOMS_AXIS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_ATOMS_TYPE_AXIS, soyatomsAxisClass))
#define SOY_ATOMS_IS_AXIS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_ATOMS_TYPE_AXIS))
#define SOY_ATOMS_IS_AXIS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_ATOMS_TYPE_AXIS))
#define SOY_ATOMS_AXIS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_ATOMS_TYPE_AXIS, soyatomsAxisClass))

typedef struct _soyatomsAxis soyatomsAxis;
typedef struct _soyatomsAxisClass soyatomsAxisClass;
typedef struct _soyatomsAxisPrivate soyatomsAxisPrivate;

#define SOY_ATOMS_TYPE_COLOR (soy_atoms_color_get_type ())
#define SOY_ATOMS_COLOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_ATOMS_TYPE_COLOR, soyatomsColor))
#define SOY_ATOMS_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_ATOMS_TYPE_COLOR, soyatomsColorClass))
#define SOY_ATOMS_IS_COLOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_ATOMS_TYPE_COLOR))
#define SOY_ATOMS_IS_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_ATOMS_TYPE_COLOR))
#define SOY_ATOMS_COLOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_ATOMS_TYPE_COLOR, soyatomsColorClass))

typedef struct _soyatomsColor soyatomsColor;
typedef struct _soyatomsColorClass soyatomsColorClass;
typedef struct _soyatomsColorPrivate soyatomsColorPrivate;

#define SOY_TYPE_MATH_OPERATOR (soy_math_operator_get_type ())

#define SOY_TYPE_COMPARISON (soy_comparison_get_type ())

#define SOY_ATOMS_COLOR_TYPE_COLORMAP (soy_atoms_color_colormap_get_type ())
#define SOY_ATOMS_COLOR_COLORMAP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_ATOMS_COLOR_TYPE_COLORMAP, soyatomsColorColormap))
#define SOY_ATOMS_COLOR_COLORMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_ATOMS_COLOR_TYPE_COLORMAP, soyatomsColorColormapClass))
#define SOY_ATOMS_COLOR_IS_COLORMAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_ATOMS_COLOR_TYPE_COLORMAP))
#define SOY_ATOMS_COLOR_IS_COLORMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_ATOMS_COLOR_TYPE_COLORMAP))
#define SOY_ATOMS_COLOR_COLORMAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_ATOMS_COLOR_TYPE_COLORMAP, soyatomsColorColormapClass))

typedef struct _soyatomsColorColormap soyatomsColorColormap;
typedef struct _soyatomsColorColormapClass soyatomsColorColormapClass;
typedef struct _soyatomsColorColormapPrivate soyatomsColorColormapPrivate;

#define SOY_ATOMS_TYPE_FACE (soy_atoms_face_get_type ())
#define SOY_ATOMS_FACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_ATOMS_TYPE_FACE, soyatomsFace))
#define SOY_ATOMS_FACE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_ATOMS_TYPE_FACE, soyatomsFaceClass))
#define SOY_ATOMS_IS_FACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_ATOMS_TYPE_FACE))
#define SOY_ATOMS_IS_FACE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_ATOMS_TYPE_FACE))
#define SOY_ATOMS_FACE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_ATOMS_TYPE_FACE, soyatomsFaceClass))

typedef struct _soyatomsFace soyatomsFace;
typedef struct _soyatomsFaceClass soyatomsFaceClass;
typedef struct _soyatomsFacePrivate soyatomsFacePrivate;

#define SOY_ATOMS_TYPE_VERTEX (soy_atoms_vertex_get_type ())
#define SOY_ATOMS_VERTEX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_ATOMS_TYPE_VERTEX, soyatomsVertex))
#define SOY_ATOMS_VERTEX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_ATOMS_TYPE_VERTEX, soyatomsVertexClass))
#define SOY_ATOMS_IS_VERTEX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_ATOMS_TYPE_VERTEX))
#define SOY_ATOMS_IS_VERTEX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_ATOMS_TYPE_VERTEX))
#define SOY_ATOMS_VERTEX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_ATOMS_TYPE_VERTEX, soyatomsVertexClass))

typedef struct _soyatomsVertex soyatomsVertex;
typedef struct _soyatomsVertexClass soyatomsVertexClass;

#define SOY_ATOMS_TYPE_MORPH (soy_atoms_morph_get_type ())
#define SOY_ATOMS_MORPH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_ATOMS_TYPE_MORPH, soyatomsMorph))
#define SOY_ATOMS_MORPH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_ATOMS_TYPE_MORPH, soyatomsMorphClass))
#define SOY_ATOMS_IS_MORPH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_ATOMS_TYPE_MORPH))
#define SOY_ATOMS_IS_MORPH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_ATOMS_TYPE_MORPH))
#define SOY_ATOMS_MORPH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_ATOMS_TYPE_MORPH, soyatomsMorphClass))

typedef struct _soyatomsMorph soyatomsMorph;
typedef struct _soyatomsMorphClass soyatomsMorphClass;
typedef struct _soyatomsMorphPrivate soyatomsMorphPrivate;

#define SOY_BODIES_TYPE_BODY (soy_bodies_body_get_type ())
#define SOY_BODIES_BODY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_BODIES_TYPE_BODY, soybodiesBody))
#define SOY_BODIES_BODY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_BODIES_TYPE_BODY, soybodiesBodyClass))
#define SOY_BODIES_IS_BODY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_BODIES_TYPE_BODY))
#define SOY_BODIES_IS_BODY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_BODIES_TYPE_BODY))
#define SOY_BODIES_BODY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_BODIES_TYPE_BODY, soybodiesBodyClass))

typedef struct _soybodiesBody soybodiesBody;
typedef struct _soybodiesBodyClass soybodiesBodyClass;

#define SOY_BODIES_TYPE_MESH (soy_bodies_mesh_get_type ())
#define SOY_BODIES_MESH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_BODIES_TYPE_MESH, soybodiesMesh))
#define SOY_BODIES_MESH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_BODIES_TYPE_MESH, soybodiesMeshClass))
#define SOY_BODIES_IS_MESH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_BODIES_TYPE_MESH))
#define SOY_BODIES_IS_MESH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_BODIES_TYPE_MESH))
#define SOY_BODIES_MESH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_BODIES_TYPE_MESH, soybodiesMeshClass))

typedef struct _soybodiesMesh soybodiesMesh;
typedef struct _soybodiesMeshClass soybodiesMeshClass;

#define SOY_ATOMS_TYPE_POSITION (soy_atoms_position_get_type ())
#define SOY_ATOMS_POSITION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_ATOMS_TYPE_POSITION, soyatomsPosition))
#define SOY_ATOMS_POSITION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_ATOMS_TYPE_POSITION, soyatomsPositionClass))
#define SOY_ATOMS_IS_POSITION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_ATOMS_TYPE_POSITION))
#define SOY_ATOMS_IS_POSITION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_ATOMS_TYPE_POSITION))
#define SOY_ATOMS_POSITION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_ATOMS_TYPE_POSITION, soyatomsPositionClass))

typedef struct _soyatomsPosition soyatomsPosition;
typedef struct _soyatomsPositionClass soyatomsPositionClass;
typedef struct _soyatomsPositionPrivate soyatomsPositionPrivate;

#define SOY_ATOMS_TYPE_RADIUS (soy_atoms_radius_get_type ())
#define SOY_ATOMS_RADIUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_ATOMS_TYPE_RADIUS, soyatomsRadius))
#define SOY_ATOMS_RADIUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_ATOMS_TYPE_RADIUS, soyatomsRadiusClass))
#define SOY_ATOMS_IS_RADIUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_ATOMS_TYPE_RADIUS))
#define SOY_ATOMS_IS_RADIUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_ATOMS_TYPE_RADIUS))
#define SOY_ATOMS_RADIUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_ATOMS_TYPE_RADIUS, soyatomsRadiusClass))

typedef struct _soyatomsRadius soyatomsRadius;
typedef struct _soyatomsRadiusClass soyatomsRadiusClass;
typedef struct _soyatomsRadiusPrivate soyatomsRadiusPrivate;

#define SOY_ATOMS_TYPE_ROTATION (soy_atoms_rotation_get_type ())
#define SOY_ATOMS_ROTATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_ATOMS_TYPE_ROTATION, soyatomsRotation))
#define SOY_ATOMS_ROTATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_ATOMS_TYPE_ROTATION, soyatomsRotationClass))
#define SOY_ATOMS_IS_ROTATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_ATOMS_TYPE_ROTATION))
#define SOY_ATOMS_IS_ROTATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_ATOMS_TYPE_ROTATION))
#define SOY_ATOMS_ROTATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_ATOMS_TYPE_ROTATION, soyatomsRotationClass))

typedef struct _soyatomsRotation soyatomsRotation;
typedef struct _soyatomsRotationClass soyatomsRotationClass;
typedef struct _soyatomsRotationPrivate soyatomsRotationPrivate;

#define SOY_ATOMS_TYPE_SIZE (soy_atoms_size_get_type ())
#define SOY_ATOMS_SIZE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_ATOMS_TYPE_SIZE, soyatomsSize))
#define SOY_ATOMS_SIZE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_ATOMS_TYPE_SIZE, soyatomsSizeClass))
#define SOY_ATOMS_IS_SIZE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_ATOMS_TYPE_SIZE))
#define SOY_ATOMS_IS_SIZE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_ATOMS_TYPE_SIZE))
#define SOY_ATOMS_SIZE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_ATOMS_TYPE_SIZE, soyatomsSizeClass))

typedef struct _soyatomsSize soyatomsSize;
typedef struct _soyatomsSizeClass soyatomsSizeClass;
typedef struct _soyatomsSizePrivate soyatomsSizePrivate;

#define SOY_ATOMS_TYPE_VECTOR (soy_atoms_vector_get_type ())
#define SOY_ATOMS_VECTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_ATOMS_TYPE_VECTOR, soyatomsVector))
#define SOY_ATOMS_VECTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_ATOMS_TYPE_VECTOR, soyatomsVectorClass))
#define SOY_ATOMS_IS_VECTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_ATOMS_TYPE_VECTOR))
#define SOY_ATOMS_IS_VECTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_ATOMS_TYPE_VECTOR))
#define SOY_ATOMS_VECTOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_ATOMS_TYPE_VECTOR, soyatomsVectorClass))

typedef struct _soyatomsVector soyatomsVector;
typedef struct _soyatomsVectorClass soyatomsVectorClass;
typedef struct _soyatomsVectorPrivate soyatomsVectorPrivate;
typedef struct _soyatomsVertexPrivate soyatomsVertexPrivate;
typedef struct _soybodiesBodyPrivate soybodiesBodyPrivate;

#define SOY_BODIES_TYPE_CAMERA (soy_bodies_camera_get_type ())
#define SOY_BODIES_CAMERA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_BODIES_TYPE_CAMERA, soybodiesCamera))
#define SOY_BODIES_CAMERA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_BODIES_TYPE_CAMERA, soybodiesCameraClass))
#define SOY_BODIES_IS_CAMERA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_BODIES_TYPE_CAMERA))
#define SOY_BODIES_IS_CAMERA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_BODIES_TYPE_CAMERA))
#define SOY_BODIES_CAMERA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_BODIES_TYPE_CAMERA, soybodiesCameraClass))

typedef struct _soybodiesCamera soybodiesCamera;
typedef struct _soybodiesCameraClass soybodiesCameraClass;

#define SOY_SCENES_TYPE_SCENE (soy_scenes_scene_get_type ())
#define SOY_SCENES_SCENE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_SCENES_TYPE_SCENE, soyscenesScene))
#define SOY_SCENES_SCENE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_SCENES_TYPE_SCENE, soyscenesSceneClass))
#define SOY_SCENES_IS_SCENE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_SCENES_TYPE_SCENE))
#define SOY_SCENES_IS_SCENE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_SCENES_TYPE_SCENE))
#define SOY_SCENES_SCENE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_SCENES_TYPE_SCENE, soyscenesSceneClass))

typedef struct _soyscenesScene soyscenesScene;
typedef struct _soyscenesSceneClass soyscenesSceneClass;

#define SOY_BODIES_TYPE_BILLBOARD (soy_bodies_billboard_get_type ())
#define SOY_BODIES_BILLBOARD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_BODIES_TYPE_BILLBOARD, soybodiesBillboard))
#define SOY_BODIES_BILLBOARD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_BODIES_TYPE_BILLBOARD, soybodiesBillboardClass))
#define SOY_BODIES_IS_BILLBOARD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_BODIES_TYPE_BILLBOARD))
#define SOY_BODIES_IS_BILLBOARD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_BODIES_TYPE_BILLBOARD))
#define SOY_BODIES_BILLBOARD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_BODIES_TYPE_BILLBOARD, soybodiesBillboardClass))

typedef struct _soybodiesBillboard soybodiesBillboard;
typedef struct _soybodiesBillboardClass soybodiesBillboardClass;
typedef struct _soybodiesBillboardPrivate soybodiesBillboardPrivate;

#define SOY_BODIES_TYPE_BOX (soy_bodies_box_get_type ())
#define SOY_BODIES_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_BODIES_TYPE_BOX, soybodiesBox))
#define SOY_BODIES_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_BODIES_TYPE_BOX, soybodiesBoxClass))
#define SOY_BODIES_IS_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_BODIES_TYPE_BOX))
#define SOY_BODIES_IS_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_BODIES_TYPE_BOX))
#define SOY_BODIES_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_BODIES_TYPE_BOX, soybodiesBoxClass))

typedef struct _soybodiesBox soybodiesBox;
typedef struct _soybodiesBoxClass soybodiesBoxClass;
typedef struct _soybodiesBoxPrivate soybodiesBoxPrivate;
typedef struct _soybodiesCameraPrivate soybodiesCameraPrivate;

#define SOY_BODIES_TYPE_CYLINDER (soy_bodies_cylinder_get_type ())
#define SOY_BODIES_CYLINDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_BODIES_TYPE_CYLINDER, soybodiesCylinder))
#define SOY_BODIES_CYLINDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_BODIES_TYPE_CYLINDER, soybodiesCylinderClass))
#define SOY_BODIES_IS_CYLINDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_BODIES_TYPE_CYLINDER))
#define SOY_BODIES_IS_CYLINDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_BODIES_TYPE_CYLINDER))
#define SOY_BODIES_CYLINDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_BODIES_TYPE_CYLINDER, soybodiesCylinderClass))

typedef struct _soybodiesCylinder soybodiesCylinder;
typedef struct _soybodiesCylinderClass soybodiesCylinderClass;
typedef struct _soybodiesCylinderPrivate soybodiesCylinderPrivate;

#define SOY_BODIES_TYPE_LIGHT (soy_bodies_light_get_type ())
#define SOY_BODIES_LIGHT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_BODIES_TYPE_LIGHT, soybodiesLight))
#define SOY_BODIES_LIGHT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_BODIES_TYPE_LIGHT, soybodiesLightClass))
#define SOY_BODIES_IS_LIGHT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_BODIES_TYPE_LIGHT))
#define SOY_BODIES_IS_LIGHT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_BODIES_TYPE_LIGHT))
#define SOY_BODIES_LIGHT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_BODIES_TYPE_LIGHT, soybodiesLightClass))

typedef struct _soybodiesLight soybodiesLight;
typedef struct _soybodiesLightClass soybodiesLightClass;
typedef struct _soybodiesLightPrivate soybodiesLightPrivate;

#define SOY_TEXTURES_TYPE_TEXTURE (soy_textures_texture_get_type ())
#define SOY_TEXTURES_TEXTURE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_TEXTURES_TYPE_TEXTURE, soytexturesTexture))
#define SOY_TEXTURES_TEXTURE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_TEXTURES_TYPE_TEXTURE, soytexturesTextureClass))
#define SOY_TEXTURES_IS_TEXTURE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_TEXTURES_TYPE_TEXTURE))
#define SOY_TEXTURES_IS_TEXTURE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_TEXTURES_TYPE_TEXTURE))
#define SOY_TEXTURES_TEXTURE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_TEXTURES_TYPE_TEXTURE, soytexturesTextureClass))

typedef struct _soytexturesTexture soytexturesTexture;
typedef struct _soytexturesTextureClass soytexturesTextureClass;
typedef struct _soybodiesMeshPrivate soybodiesMeshPrivate;

#define SOY_BODIES_TYPE_PORTAL (soy_bodies_portal_get_type ())
#define SOY_BODIES_PORTAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_BODIES_TYPE_PORTAL, soybodiesPortal))
#define SOY_BODIES_PORTAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_BODIES_TYPE_PORTAL, soybodiesPortalClass))
#define SOY_BODIES_IS_PORTAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_BODIES_TYPE_PORTAL))
#define SOY_BODIES_IS_PORTAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_BODIES_TYPE_PORTAL))
#define SOY_BODIES_PORTAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_BODIES_TYPE_PORTAL, soybodiesPortalClass))

typedef struct _soybodiesPortal soybodiesPortal;
typedef struct _soybodiesPortalClass soybodiesPortalClass;
typedef struct _soybodiesPortalPrivate soybodiesPortalPrivate;

#define SOY_BODIES_TYPE_SPHERE (soy_bodies_sphere_get_type ())
#define SOY_BODIES_SPHERE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_BODIES_TYPE_SPHERE, soybodiesSphere))
#define SOY_BODIES_SPHERE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_BODIES_TYPE_SPHERE, soybodiesSphereClass))
#define SOY_BODIES_IS_SPHERE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_BODIES_TYPE_SPHERE))
#define SOY_BODIES_IS_SPHERE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_BODIES_TYPE_SPHERE))
#define SOY_BODIES_SPHERE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_BODIES_TYPE_SPHERE, soybodiesSphereClass))

typedef struct _soybodiesSphere soybodiesSphere;
typedef struct _soybodiesSphereClass soybodiesSphereClass;
typedef struct _soybodiesSpherePrivate soybodiesSpherePrivate;

#define SOY_CONTROLLERS_TYPE_CONTROLLER (soy_controllers_controller_get_type ())
#define SOY_CONTROLLERS_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_TYPE_CONTROLLER, soycontrollersController))
#define SOY_CONTROLLERS_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_TYPE_CONTROLLER, soycontrollersControllerClass))
#define SOY_CONTROLLERS_IS_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_TYPE_CONTROLLER))
#define SOY_CONTROLLERS_IS_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_TYPE_CONTROLLER))
#define SOY_CONTROLLERS_CONTROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_TYPE_CONTROLLER, soycontrollersControllerClass))

typedef struct _soycontrollersController soycontrollersController;
typedef struct _soycontrollersControllerClass soycontrollersControllerClass;
typedef struct _soycontrollersControllerPrivate soycontrollersControllerPrivate;

#define SOY_CONTROLLERS_TYPE_VIRTUAL_CONTROLLER (soy_controllers_virtual_controller_get_type ())
#define SOY_CONTROLLERS_VIRTUAL_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_TYPE_VIRTUAL_CONTROLLER, soycontrollersVirtualController))
#define SOY_CONTROLLERS_VIRTUAL_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_TYPE_VIRTUAL_CONTROLLER, soycontrollersVirtualControllerClass))
#define SOY_CONTROLLERS_IS_VIRTUAL_CONTROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_TYPE_VIRTUAL_CONTROLLER))
#define SOY_CONTROLLERS_IS_VIRTUAL_CONTROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_TYPE_VIRTUAL_CONTROLLER))
#define SOY_CONTROLLERS_VIRTUAL_CONTROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_TYPE_VIRTUAL_CONTROLLER, soycontrollersVirtualControllerClass))

typedef struct _soycontrollersVirtualController soycontrollersVirtualController;
typedef struct _soycontrollersVirtualControllerClass soycontrollersVirtualControllerClass;
typedef struct _soycontrollersVirtualControllerPrivate soycontrollersVirtualControllerPrivate;

#define SOY_CONTROLLERS_TYPE_PATHFOLLOWER (soy_controllers_pathfollower_get_type ())
#define SOY_CONTROLLERS_PATHFOLLOWER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_TYPE_PATHFOLLOWER, soycontrollersPathfollower))
#define SOY_CONTROLLERS_PATHFOLLOWER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_TYPE_PATHFOLLOWER, soycontrollersPathfollowerClass))
#define SOY_CONTROLLERS_IS_PATHFOLLOWER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_TYPE_PATHFOLLOWER))
#define SOY_CONTROLLERS_IS_PATHFOLLOWER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_TYPE_PATHFOLLOWER))
#define SOY_CONTROLLERS_PATHFOLLOWER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_TYPE_PATHFOLLOWER, soycontrollersPathfollowerClass))

typedef struct _soycontrollersPathfollower soycontrollersPathfollower;
typedef struct _soycontrollersPathfollowerClass soycontrollersPathfollowerClass;
typedef struct _soycontrollersPathfollowerPrivate soycontrollersPathfollowerPrivate;

#define SOY_CONTROLLERS_TYPE_BASE_NAVIGATOR (soy_controllers_base_navigator_get_type ())
#define SOY_CONTROLLERS_BASE_NAVIGATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_TYPE_BASE_NAVIGATOR, soycontrollersBaseNavigator))
#define SOY_CONTROLLERS_BASE_NAVIGATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_TYPE_BASE_NAVIGATOR, soycontrollersBaseNavigatorClass))
#define SOY_CONTROLLERS_IS_BASE_NAVIGATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_TYPE_BASE_NAVIGATOR))
#define SOY_CONTROLLERS_IS_BASE_NAVIGATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_TYPE_BASE_NAVIGATOR))
#define SOY_CONTROLLERS_BASE_NAVIGATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_TYPE_BASE_NAVIGATOR, soycontrollersBaseNavigatorClass))

typedef struct _soycontrollersBaseNavigator soycontrollersBaseNavigator;
typedef struct _soycontrollersBaseNavigatorClass soycontrollersBaseNavigatorClass;
typedef struct _soycontrollersBaseNavigatorPrivate soycontrollersBaseNavigatorPrivate;

#define SOY_CONTROLLERS_GRAPH_TYPE_IGRAPH (soy_controllers_graph_igraph_get_type ())
#define SOY_CONTROLLERS_GRAPH_IGRAPH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_GRAPH_TYPE_IGRAPH, soycontrollersgraphIGraph))
#define SOY_CONTROLLERS_GRAPH_IS_IGRAPH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_GRAPH_TYPE_IGRAPH))
#define SOY_CONTROLLERS_GRAPH_IGRAPH_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), SOY_CONTROLLERS_GRAPH_TYPE_IGRAPH, soycontrollersgraphIGraphIface))

typedef struct _soycontrollersgraphIGraph soycontrollersgraphIGraph;
typedef struct _soycontrollersgraphIGraphIface soycontrollersgraphIGraphIface;

#define SOY_CONTROLLERS_GRAPH_TYPE_INODE (soy_controllers_graph_inode_get_type ())
#define SOY_CONTROLLERS_GRAPH_INODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_GRAPH_TYPE_INODE, soycontrollersgraphINode))
#define SOY_CONTROLLERS_GRAPH_IS_INODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_GRAPH_TYPE_INODE))
#define SOY_CONTROLLERS_GRAPH_INODE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), SOY_CONTROLLERS_GRAPH_TYPE_INODE, soycontrollersgraphINodeIface))

typedef struct _soycontrollersgraphINode soycontrollersgraphINode;
typedef struct _soycontrollersgraphINodeIface soycontrollersgraphINodeIface;

#define SOY_CONTROLLERS_GRAPH_TYPE_EDGE (soy_controllers_graph_edge_get_type ())
#define SOY_CONTROLLERS_GRAPH_EDGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_GRAPH_TYPE_EDGE, soycontrollersgraphEdge))
#define SOY_CONTROLLERS_GRAPH_EDGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_GRAPH_TYPE_EDGE, soycontrollersgraphEdgeClass))
#define SOY_CONTROLLERS_GRAPH_IS_EDGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_GRAPH_TYPE_EDGE))
#define SOY_CONTROLLERS_GRAPH_IS_EDGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_GRAPH_TYPE_EDGE))
#define SOY_CONTROLLERS_GRAPH_EDGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_GRAPH_TYPE_EDGE, soycontrollersgraphEdgeClass))

typedef struct _soycontrollersgraphEdge soycontrollersgraphEdge;
typedef struct _soycontrollersgraphEdgeClass soycontrollersgraphEdgeClass;

#define SOY_CONTROLLERS_TYPE_DUALSHOCK3 (soy_controllers_dualshock3_get_type ())
#define SOY_CONTROLLERS_DUALSHOCK3(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_TYPE_DUALSHOCK3, soycontrollersDualshock3))
#define SOY_CONTROLLERS_DUALSHOCK3_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_TYPE_DUALSHOCK3, soycontrollersDualshock3Class))
#define SOY_CONTROLLERS_IS_DUALSHOCK3(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_TYPE_DUALSHOCK3))
#define SOY_CONTROLLERS_IS_DUALSHOCK3_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_TYPE_DUALSHOCK3))
#define SOY_CONTROLLERS_DUALSHOCK3_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_TYPE_DUALSHOCK3, soycontrollersDualshock3Class))

typedef struct _soycontrollersDualshock3 soycontrollersDualshock3;
typedef struct _soycontrollersDualshock3Class soycontrollersDualshock3Class;
typedef struct _soycontrollersDualshock3Private soycontrollersDualshock3Private;

#define SOY_CONTROLLERS_TYPE_GRID_NAVIGATOR (soy_controllers_grid_navigator_get_type ())
#define SOY_CONTROLLERS_GRID_NAVIGATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_TYPE_GRID_NAVIGATOR, soycontrollersGridNavigator))
#define SOY_CONTROLLERS_GRID_NAVIGATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_TYPE_GRID_NAVIGATOR, soycontrollersGridNavigatorClass))
#define SOY_CONTROLLERS_IS_GRID_NAVIGATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_TYPE_GRID_NAVIGATOR))
#define SOY_CONTROLLERS_IS_GRID_NAVIGATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_TYPE_GRID_NAVIGATOR))
#define SOY_CONTROLLERS_GRID_NAVIGATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_TYPE_GRID_NAVIGATOR, soycontrollersGridNavigatorClass))

typedef struct _soycontrollersGridNavigator soycontrollersGridNavigator;
typedef struct _soycontrollersGridNavigatorClass soycontrollersGridNavigatorClass;
typedef struct _soycontrollersGridNavigatorPrivate soycontrollersGridNavigatorPrivate;

#define SOY_CONTROLLERS_TYPE_KEYBOARD (soy_controllers_keyboard_get_type ())
#define SOY_CONTROLLERS_KEYBOARD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_TYPE_KEYBOARD, soycontrollersKeyboard))
#define SOY_CONTROLLERS_KEYBOARD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_TYPE_KEYBOARD, soycontrollersKeyboardClass))
#define SOY_CONTROLLERS_IS_KEYBOARD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_TYPE_KEYBOARD))
#define SOY_CONTROLLERS_IS_KEYBOARD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_TYPE_KEYBOARD))
#define SOY_CONTROLLERS_KEYBOARD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_TYPE_KEYBOARD, soycontrollersKeyboardClass))

typedef struct _soycontrollersKeyboard soycontrollersKeyboard;
typedef struct _soycontrollersKeyboardClass soycontrollersKeyboardClass;
typedef struct _soycontrollersKeyboardPrivate soycontrollersKeyboardPrivate;

#define SOY_CONTROLLERS_TYPE_POINTER (soy_controllers_pointer_get_type ())
#define SOY_CONTROLLERS_POINTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_TYPE_POINTER, soycontrollersPointer))
#define SOY_CONTROLLERS_POINTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_TYPE_POINTER, soycontrollersPointerClass))
#define SOY_CONTROLLERS_IS_POINTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_TYPE_POINTER))
#define SOY_CONTROLLERS_IS_POINTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_TYPE_POINTER))
#define SOY_CONTROLLERS_POINTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_TYPE_POINTER, soycontrollersPointerClass))

typedef struct _soycontrollersPointer soycontrollersPointer;
typedef struct _soycontrollersPointerClass soycontrollersPointerClass;
typedef struct _soycontrollersPointerPrivate soycontrollersPointerPrivate;

#define SOY_CONTROLLERS_TYPE_SPACE_NAVIGATOR (soy_controllers_space_navigator_get_type ())
#define SOY_CONTROLLERS_SPACE_NAVIGATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_TYPE_SPACE_NAVIGATOR, soycontrollersSpaceNavigator))
#define SOY_CONTROLLERS_SPACE_NAVIGATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_TYPE_SPACE_NAVIGATOR, soycontrollersSpaceNavigatorClass))
#define SOY_CONTROLLERS_IS_SPACE_NAVIGATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_TYPE_SPACE_NAVIGATOR))
#define SOY_CONTROLLERS_IS_SPACE_NAVIGATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_TYPE_SPACE_NAVIGATOR))
#define SOY_CONTROLLERS_SPACE_NAVIGATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_TYPE_SPACE_NAVIGATOR, soycontrollersSpaceNavigatorClass))

typedef struct _soycontrollersSpaceNavigator soycontrollersSpaceNavigator;
typedef struct _soycontrollersSpaceNavigatorClass soycontrollersSpaceNavigatorClass;
typedef struct _soycontrollersSpaceNavigatorPrivate soycontrollersSpaceNavigatorPrivate;

#define SOY_CONTROLLERS_TYPE_WIIMOTE (soy_controllers_wiimote_get_type ())
#define SOY_CONTROLLERS_WIIMOTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_TYPE_WIIMOTE, soycontrollersWiimote))
#define SOY_CONTROLLERS_WIIMOTE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_TYPE_WIIMOTE, soycontrollersWiimoteClass))
#define SOY_CONTROLLERS_IS_WIIMOTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_TYPE_WIIMOTE))
#define SOY_CONTROLLERS_IS_WIIMOTE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_TYPE_WIIMOTE))
#define SOY_CONTROLLERS_WIIMOTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_TYPE_WIIMOTE, soycontrollersWiimoteClass))

typedef struct _soycontrollersWiimote soycontrollersWiimote;
typedef struct _soycontrollersWiimoteClass soycontrollersWiimoteClass;
typedef struct _soycontrollersWiimotePrivate soycontrollersWiimotePrivate;

#define SOY_CONTROLLERS_GRAPH_TYPE_ABSTRACT_GRAPH (soy_controllers_graph_abstract_graph_get_type ())
#define SOY_CONTROLLERS_GRAPH_ABSTRACT_GRAPH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_GRAPH_TYPE_ABSTRACT_GRAPH, soycontrollersgraphAbstractGraph))
#define SOY_CONTROLLERS_GRAPH_ABSTRACT_GRAPH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_GRAPH_TYPE_ABSTRACT_GRAPH, soycontrollersgraphAbstractGraphClass))
#define SOY_CONTROLLERS_GRAPH_IS_ABSTRACT_GRAPH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_GRAPH_TYPE_ABSTRACT_GRAPH))
#define SOY_CONTROLLERS_GRAPH_IS_ABSTRACT_GRAPH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_GRAPH_TYPE_ABSTRACT_GRAPH))
#define SOY_CONTROLLERS_GRAPH_ABSTRACT_GRAPH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_GRAPH_TYPE_ABSTRACT_GRAPH, soycontrollersgraphAbstractGraphClass))

typedef struct _soycontrollersgraphAbstractGraph soycontrollersgraphAbstractGraph;
typedef struct _soycontrollersgraphAbstractGraphClass soycontrollersgraphAbstractGraphClass;
typedef struct _soycontrollersgraphAbstractGraphPrivate soycontrollersgraphAbstractGraphPrivate;
typedef struct _soycontrollersgraphEdgePrivate soycontrollersgraphEdgePrivate;

#define SOY_CONTROLLERS_GRAPH_TYPE_GRID (soy_controllers_graph_grid_get_type ())
#define SOY_CONTROLLERS_GRAPH_GRID(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_GRAPH_TYPE_GRID, soycontrollersgraphGrid))
#define SOY_CONTROLLERS_GRAPH_GRID_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_GRAPH_TYPE_GRID, soycontrollersgraphGridClass))
#define SOY_CONTROLLERS_GRAPH_IS_GRID(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_GRAPH_TYPE_GRID))
#define SOY_CONTROLLERS_GRAPH_IS_GRID_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_GRAPH_TYPE_GRID))
#define SOY_CONTROLLERS_GRAPH_GRID_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_GRAPH_TYPE_GRID, soycontrollersgraphGridClass))

typedef struct _soycontrollersgraphGrid soycontrollersgraphGrid;
typedef struct _soycontrollersgraphGridClass soycontrollersgraphGridClass;
typedef struct _soycontrollersgraphGridPrivate soycontrollersgraphGridPrivate;

#define SOY_CONTROLLERS_GRAPH__GRID_TYPE_INT_NODE (soy_controllers_graph__grid_int_node_get_type ())
#define SOY_CONTROLLERS_GRAPH__GRID_INT_NODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_GRAPH__GRID_TYPE_INT_NODE, soycontrollersgraph_gridIntNode))
#define SOY_CONTROLLERS_GRAPH__GRID_INT_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_GRAPH__GRID_TYPE_INT_NODE, soycontrollersgraph_gridIntNodeClass))
#define SOY_CONTROLLERS_GRAPH__GRID_IS_INT_NODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_GRAPH__GRID_TYPE_INT_NODE))
#define SOY_CONTROLLERS_GRAPH__GRID_IS_INT_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_GRAPH__GRID_TYPE_INT_NODE))
#define SOY_CONTROLLERS_GRAPH__GRID_INT_NODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_GRAPH__GRID_TYPE_INT_NODE, soycontrollersgraph_gridIntNodeClass))

typedef struct _soycontrollersgraph_gridIntNode soycontrollersgraph_gridIntNode;
typedef struct _soycontrollersgraph_gridIntNodeClass soycontrollersgraph_gridIntNodeClass;

#define SOY_CONTROLLERS_GRAPH__GRID_TYPE_OFFSET_PAIR (soy_controllers_graph__grid_offset_pair_get_type ())
#define SOY_CONTROLLERS_GRAPH__GRID_OFFSET_PAIR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_GRAPH__GRID_TYPE_OFFSET_PAIR, soycontrollersgraph_gridOffsetPair))
#define SOY_CONTROLLERS_GRAPH__GRID_OFFSET_PAIR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_GRAPH__GRID_TYPE_OFFSET_PAIR, soycontrollersgraph_gridOffsetPairClass))
#define SOY_CONTROLLERS_GRAPH__GRID_IS_OFFSET_PAIR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_GRAPH__GRID_TYPE_OFFSET_PAIR))
#define SOY_CONTROLLERS_GRAPH__GRID_IS_OFFSET_PAIR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_GRAPH__GRID_TYPE_OFFSET_PAIR))
#define SOY_CONTROLLERS_GRAPH__GRID_OFFSET_PAIR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_GRAPH__GRID_TYPE_OFFSET_PAIR, soycontrollersgraph_gridOffsetPairClass))

typedef struct _soycontrollersgraph_gridOffsetPair soycontrollersgraph_gridOffsetPair;
typedef struct _soycontrollersgraph_gridOffsetPairClass soycontrollersgraph_gridOffsetPairClass;
typedef struct _soycontrollersgraph_gridOffsetPairPrivate soycontrollersgraph_gridOffsetPairPrivate;
typedef struct _soycontrollersgraph_gridIntNodePrivate soycontrollersgraph_gridIntNodePrivate;

#define SOY_CONTROLLERS_GRAPH__GRID_TYPE_TERMINAL_NODE (soy_controllers_graph__grid_terminal_node_get_type ())
#define SOY_CONTROLLERS_GRAPH__GRID_TERMINAL_NODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_GRAPH__GRID_TYPE_TERMINAL_NODE, soycontrollersgraph_gridTerminalNode))
#define SOY_CONTROLLERS_GRAPH__GRID_TERMINAL_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_GRAPH__GRID_TYPE_TERMINAL_NODE, soycontrollersgraph_gridTerminalNodeClass))
#define SOY_CONTROLLERS_GRAPH__GRID_IS_TERMINAL_NODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_GRAPH__GRID_TYPE_TERMINAL_NODE))
#define SOY_CONTROLLERS_GRAPH__GRID_IS_TERMINAL_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_GRAPH__GRID_TYPE_TERMINAL_NODE))
#define SOY_CONTROLLERS_GRAPH__GRID_TERMINAL_NODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_GRAPH__GRID_TYPE_TERMINAL_NODE, soycontrollersgraph_gridTerminalNodeClass))

typedef struct _soycontrollersgraph_gridTerminalNode soycontrollersgraph_gridTerminalNode;
typedef struct _soycontrollersgraph_gridTerminalNodeClass soycontrollersgraph_gridTerminalNodeClass;
typedef struct _soycontrollersgraph_gridTerminalNodePrivate soycontrollersgraph_gridTerminalNodePrivate;

#define SOY_CONTROLLERS_GRAPH_TYPE_PATHFINDER (soy_controllers_graph_pathfinder_get_type ())
#define SOY_CONTROLLERS_GRAPH_PATHFINDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_GRAPH_TYPE_PATHFINDER, soycontrollersgraphPathfinder))
#define SOY_CONTROLLERS_GRAPH_PATHFINDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_GRAPH_TYPE_PATHFINDER, soycontrollersgraphPathfinderClass))
#define SOY_CONTROLLERS_GRAPH_IS_PATHFINDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_GRAPH_TYPE_PATHFINDER))
#define SOY_CONTROLLERS_GRAPH_IS_PATHFINDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_GRAPH_TYPE_PATHFINDER))
#define SOY_CONTROLLERS_GRAPH_PATHFINDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_GRAPH_TYPE_PATHFINDER, soycontrollersgraphPathfinderClass))

typedef struct _soycontrollersgraphPathfinder soycontrollersgraphPathfinder;
typedef struct _soycontrollersgraphPathfinderClass soycontrollersgraphPathfinderClass;
typedef struct _soycontrollersgraphPathfinderPrivate soycontrollersgraphPathfinderPrivate;

#define SOY_CONTROLLERS_GRAPH_TYPE_SPACE (soy_controllers_graph_space_get_type ())
#define SOY_CONTROLLERS_GRAPH_SPACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_GRAPH_TYPE_SPACE, soycontrollersgraphSpace))
#define SOY_CONTROLLERS_GRAPH_SPACE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_GRAPH_TYPE_SPACE, soycontrollersgraphSpaceClass))
#define SOY_CONTROLLERS_GRAPH_IS_SPACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_GRAPH_TYPE_SPACE))
#define SOY_CONTROLLERS_GRAPH_IS_SPACE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_GRAPH_TYPE_SPACE))
#define SOY_CONTROLLERS_GRAPH_SPACE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_GRAPH_TYPE_SPACE, soycontrollersgraphSpaceClass))

typedef struct _soycontrollersgraphSpace soycontrollersgraphSpace;
typedef struct _soycontrollersgraphSpaceClass soycontrollersgraphSpaceClass;
typedef struct _soycontrollersgraphSpacePrivate soycontrollersgraphSpacePrivate;

#define SOY_CONTROLLERS_GRAPH__SPACE_TYPE_INT3_NODE (soy_controllers_graph__space_int3_node_get_type ())
#define SOY_CONTROLLERS_GRAPH__SPACE_INT3_NODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_INT3_NODE, soycontrollersgraph_spaceInt3Node))
#define SOY_CONTROLLERS_GRAPH__SPACE_INT3_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_INT3_NODE, soycontrollersgraph_spaceInt3NodeClass))
#define SOY_CONTROLLERS_GRAPH__SPACE_IS_INT3_NODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_INT3_NODE))
#define SOY_CONTROLLERS_GRAPH__SPACE_IS_INT3_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_INT3_NODE))
#define SOY_CONTROLLERS_GRAPH__SPACE_INT3_NODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_INT3_NODE, soycontrollersgraph_spaceInt3NodeClass))

typedef struct _soycontrollersgraph_spaceInt3Node soycontrollersgraph_spaceInt3Node;
typedef struct _soycontrollersgraph_spaceInt3NodeClass soycontrollersgraph_spaceInt3NodeClass;

#define SOY_CONTROLLERS_GRAPH__SPACE_TYPE_OFFSET_TRIPLE (soy_controllers_graph__space_offset_triple_get_type ())
#define SOY_CONTROLLERS_GRAPH__SPACE_OFFSET_TRIPLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_OFFSET_TRIPLE, soycontrollersgraph_spaceOffsetTriple))
#define SOY_CONTROLLERS_GRAPH__SPACE_OFFSET_TRIPLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_OFFSET_TRIPLE, soycontrollersgraph_spaceOffsetTripleClass))
#define SOY_CONTROLLERS_GRAPH__SPACE_IS_OFFSET_TRIPLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_OFFSET_TRIPLE))
#define SOY_CONTROLLERS_GRAPH__SPACE_IS_OFFSET_TRIPLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_OFFSET_TRIPLE))
#define SOY_CONTROLLERS_GRAPH__SPACE_OFFSET_TRIPLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_OFFSET_TRIPLE, soycontrollersgraph_spaceOffsetTripleClass))

typedef struct _soycontrollersgraph_spaceOffsetTriple soycontrollersgraph_spaceOffsetTriple;
typedef struct _soycontrollersgraph_spaceOffsetTripleClass soycontrollersgraph_spaceOffsetTripleClass;
typedef struct _soycontrollersgraph_spaceOffsetTriplePrivate soycontrollersgraph_spaceOffsetTriplePrivate;
typedef struct _soycontrollersgraph_spaceInt3NodePrivate soycontrollersgraph_spaceInt3NodePrivate;

#define SOY_CONTROLLERS_GRAPH__SPACE_TYPE_TERMINAL_NODE (soy_controllers_graph__space_terminal_node_get_type ())
#define SOY_CONTROLLERS_GRAPH__SPACE_TERMINAL_NODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_TERMINAL_NODE, soycontrollersgraph_spaceTerminalNode))
#define SOY_CONTROLLERS_GRAPH__SPACE_TERMINAL_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_TERMINAL_NODE, soycontrollersgraph_spaceTerminalNodeClass))
#define SOY_CONTROLLERS_GRAPH__SPACE_IS_TERMINAL_NODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_TERMINAL_NODE))
#define SOY_CONTROLLERS_GRAPH__SPACE_IS_TERMINAL_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_TERMINAL_NODE))
#define SOY_CONTROLLERS_GRAPH__SPACE_TERMINAL_NODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_CONTROLLERS_GRAPH__SPACE_TYPE_TERMINAL_NODE, soycontrollersgraph_spaceTerminalNodeClass))

typedef struct _soycontrollersgraph_spaceTerminalNode soycontrollersgraph_spaceTerminalNode;
typedef struct _soycontrollersgraph_spaceTerminalNodeClass soycontrollersgraph_spaceTerminalNodeClass;
typedef struct _soycontrollersgraph_spaceTerminalNodePrivate soycontrollersgraph_spaceTerminalNodePrivate;

#define SOY_EVENTS_TYPE_BUTTON (soy_events_button_get_type ())

#define SOY_TYPE_EVENT_TYPE (soy_event_type_get_type ())

#define SOY_WIDGETS_TYPE_WIDGET (soy_widgets_widget_get_type ())
#define SOY_WIDGETS_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_WIDGETS_TYPE_WIDGET, soywidgetsWidget))
#define SOY_WIDGETS_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_WIDGETS_TYPE_WIDGET, soywidgetsWidgetClass))
#define SOY_WIDGETS_IS_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_WIDGETS_TYPE_WIDGET))
#define SOY_WIDGETS_IS_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_WIDGETS_TYPE_WIDGET))
#define SOY_WIDGETS_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_WIDGETS_TYPE_WIDGET, soywidgetsWidgetClass))

typedef struct _soywidgetsWidget soywidgetsWidget;
typedef struct _soywidgetsWidgetClass soywidgetsWidgetClass;

#define SOY_WIDGETS_TYPE_CONTAINER (soy_widgets_container_get_type ())
#define SOY_WIDGETS_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_WIDGETS_TYPE_CONTAINER, soywidgetsContainer))
#define SOY_WIDGETS_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_WIDGETS_TYPE_CONTAINER, soywidgetsContainerClass))
#define SOY_WIDGETS_IS_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_WIDGETS_TYPE_CONTAINER))
#define SOY_WIDGETS_IS_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_WIDGETS_TYPE_CONTAINER))
#define SOY_WIDGETS_CONTAINER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_WIDGETS_TYPE_CONTAINER, soywidgetsContainerClass))

typedef struct _soywidgetsContainer soywidgetsContainer;
typedef struct _soywidgetsContainerClass soywidgetsContainerClass;

#define SOY_WIDGETS_TYPE_WINDOW (soy_widgets_window_get_type ())
#define SOY_WIDGETS_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_WIDGETS_TYPE_WINDOW, soywidgetsWindow))
#define SOY_WIDGETS_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_WIDGETS_TYPE_WINDOW, soywidgetsWindowClass))
#define SOY_WIDGETS_IS_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_WIDGETS_TYPE_WINDOW))
#define SOY_WIDGETS_IS_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_WIDGETS_TYPE_WINDOW))
#define SOY_WIDGETS_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_WIDGETS_TYPE_WINDOW, soywidgetsWindowClass))

typedef struct _soywidgetsWindow soywidgetsWindow;
typedef struct _soywidgetsWindowClass soywidgetsWindowClass;
typedef struct _soyeventsButton soyeventsButton;

#define SOY_EVENTS_TYPE_EVENT (soy_events_event_get_type ())
#define SOY_EVENTS_EVENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_EVENTS_TYPE_EVENT, soyeventsEvent))
#define SOY_EVENTS_EVENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_EVENTS_TYPE_EVENT, soyeventsEventClass))
#define SOY_EVENTS_IS_EVENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_EVENTS_TYPE_EVENT))
#define SOY_EVENTS_IS_EVENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_EVENTS_TYPE_EVENT))
#define SOY_EVENTS_EVENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_EVENTS_TYPE_EVENT, soyeventsEventClass))

typedef struct _soyeventsEvent soyeventsEvent;
typedef struct _soyeventsEventClass soyeventsEventClass;
typedef struct _soyeventsEventPrivate soyeventsEventPrivate;

#define SOY_EVENTS_TYPE_DEVICE (soy_events_device_get_type ())
#define SOY_EVENTS_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_EVENTS_TYPE_DEVICE, soyeventsDevice))
#define SOY_EVENTS_DEVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_EVENTS_TYPE_DEVICE, soyeventsDeviceClass))
#define SOY_EVENTS_IS_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_EVENTS_TYPE_DEVICE))
#define SOY_EVENTS_IS_DEVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_EVENTS_TYPE_DEVICE))
#define SOY_EVENTS_DEVICE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_EVENTS_TYPE_DEVICE, soyeventsDeviceClass))

typedef struct _soyeventsDevice soyeventsDevice;
typedef struct _soyeventsDeviceClass soyeventsDeviceClass;
typedef struct _soyeventsDevicePrivate soyeventsDevicePrivate;

#define SOY_EVENTS_TYPE_BUTTON_PRESS (soy_events_button_press_get_type ())
#define SOY_EVENTS_BUTTON_PRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_EVENTS_TYPE_BUTTON_PRESS, soyeventsButtonPress))
#define SOY_EVENTS_BUTTON_PRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_EVENTS_TYPE_BUTTON_PRESS, soyeventsButtonPressClass))
#define SOY_EVENTS_IS_BUTTON_PRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_EVENTS_TYPE_BUTTON_PRESS))
#define SOY_EVENTS_IS_BUTTON_PRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_EVENTS_TYPE_BUTTON_PRESS))
#define SOY_EVENTS_BUTTON_PRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_EVENTS_TYPE_BUTTON_PRESS, soyeventsButtonPressClass))

typedef struct _soyeventsButtonPress soyeventsButtonPress;
typedef struct _soyeventsButtonPressClass soyeventsButtonPressClass;
typedef struct _soyeventsButtonPressPrivate soyeventsButtonPressPrivate;

#define SOY_EVENTS_TYPE_BUTTON_RELEASE (soy_events_button_release_get_type ())
#define SOY_EVENTS_BUTTON_RELEASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_EVENTS_TYPE_BUTTON_RELEASE, soyeventsButtonRelease))
#define SOY_EVENTS_BUTTON_RELEASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_EVENTS_TYPE_BUTTON_RELEASE, soyeventsButtonReleaseClass))
#define SOY_EVENTS_IS_BUTTON_RELEASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_EVENTS_TYPE_BUTTON_RELEASE))
#define SOY_EVENTS_IS_BUTTON_RELEASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_EVENTS_TYPE_BUTTON_RELEASE))
#define SOY_EVENTS_BUTTON_RELEASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_EVENTS_TYPE_BUTTON_RELEASE, soyeventsButtonReleaseClass))

typedef struct _soyeventsButtonRelease soyeventsButtonRelease;
typedef struct _soyeventsButtonReleaseClass soyeventsButtonReleaseClass;
typedef struct _soyeventsButtonReleasePrivate soyeventsButtonReleasePrivate;

#define SOY_EVENTS_TYPE_KEY_PRESS (soy_events_key_press_get_type ())
#define SOY_EVENTS_KEY_PRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_EVENTS_TYPE_KEY_PRESS, soyeventsKeyPress))
#define SOY_EVENTS_KEY_PRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_EVENTS_TYPE_KEY_PRESS, soyeventsKeyPressClass))
#define SOY_EVENTS_IS_KEY_PRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_EVENTS_TYPE_KEY_PRESS))
#define SOY_EVENTS_IS_KEY_PRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_EVENTS_TYPE_KEY_PRESS))
#define SOY_EVENTS_KEY_PRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_EVENTS_TYPE_KEY_PRESS, soyeventsKeyPressClass))

typedef struct _soyeventsKeyPress soyeventsKeyPress;
typedef struct _soyeventsKeyPressClass soyeventsKeyPressClass;
typedef struct _soyeventsKeyPressPrivate soyeventsKeyPressPrivate;

#define SOY_EVENTS_TYPE_KEY_RELEASE (soy_events_key_release_get_type ())
#define SOY_EVENTS_KEY_RELEASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_EVENTS_TYPE_KEY_RELEASE, soyeventsKeyRelease))
#define SOY_EVENTS_KEY_RELEASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_EVENTS_TYPE_KEY_RELEASE, soyeventsKeyReleaseClass))
#define SOY_EVENTS_IS_KEY_RELEASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_EVENTS_TYPE_KEY_RELEASE))
#define SOY_EVENTS_IS_KEY_RELEASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_EVENTS_TYPE_KEY_RELEASE))
#define SOY_EVENTS_KEY_RELEASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_EVENTS_TYPE_KEY_RELEASE, soyeventsKeyReleaseClass))

typedef struct _soyeventsKeyRelease soyeventsKeyRelease;
typedef struct _soyeventsKeyReleaseClass soyeventsKeyReleaseClass;
typedef struct _soyeventsKeyReleasePrivate soyeventsKeyReleasePrivate;

#define SOY_EVENTS_TYPE_MOTION (soy_events_motion_get_type ())
typedef struct _soyeventsMotion soyeventsMotion;

#define SOY_EVENTS_TYPE_SCROLL (soy_events_scroll_get_type ())

#define SOY_TYPE_SCROLL_DIRECTION (soy_scroll_direction_get_type ())
typedef struct _soyeventsScroll soyeventsScroll;

#define SOY_EVENTS_TYPE_WIIBUTTON (soy_events_wiibutton_get_type ())
typedef struct _soyeventsWiibutton soyeventsWiibutton;

#define SOY_FIELDS_TYPE_FIELD (soy_fields_field_get_type ())
#define SOY_FIELDS_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_FIELDS_TYPE_FIELD, soyfieldsField))
#define SOY_FIELDS_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_FIELDS_TYPE_FIELD, soyfieldsFieldClass))
#define SOY_FIELDS_IS_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_FIELDS_TYPE_FIELD))
#define SOY_FIELDS_IS_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_FIELDS_TYPE_FIELD))
#define SOY_FIELDS_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_FIELDS_TYPE_FIELD, soyfieldsFieldClass))

typedef struct _soyfieldsField soyfieldsField;
typedef struct _soyfieldsFieldClass soyfieldsFieldClass;
typedef struct _soyfieldsFieldPrivate soyfieldsFieldPrivate;

#define SOY_FIELDS_TYPE_ACCELERATE (soy_fields_accelerate_get_type ())
#define SOY_FIELDS_ACCELERATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_FIELDS_TYPE_ACCELERATE, soyfieldsAccelerate))
#define SOY_FIELDS_ACCELERATE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_FIELDS_TYPE_ACCELERATE, soyfieldsAccelerateClass))
#define SOY_FIELDS_IS_ACCELERATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_FIELDS_TYPE_ACCELERATE))
#define SOY_FIELDS_IS_ACCELERATE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_FIELDS_TYPE_ACCELERATE))
#define SOY_FIELDS_ACCELERATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_FIELDS_TYPE_ACCELERATE, soyfieldsAccelerateClass))

typedef struct _soyfieldsAccelerate soyfieldsAccelerate;
typedef struct _soyfieldsAccelerateClass soyfieldsAccelerateClass;
typedef struct _soyfieldsAcceleratePrivate soyfieldsAcceleratePrivate;

#define SOY_FIELDS_TYPE_BUOYANCY (soy_fields_buoyancy_get_type ())
#define SOY_FIELDS_BUOYANCY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_FIELDS_TYPE_BUOYANCY, soyfieldsBuoyancy))
#define SOY_FIELDS_BUOYANCY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_FIELDS_TYPE_BUOYANCY, soyfieldsBuoyancyClass))
#define SOY_FIELDS_IS_BUOYANCY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_FIELDS_TYPE_BUOYANCY))
#define SOY_FIELDS_IS_BUOYANCY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_FIELDS_TYPE_BUOYANCY))
#define SOY_FIELDS_BUOYANCY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_FIELDS_TYPE_BUOYANCY, soyfieldsBuoyancyClass))

typedef struct _soyfieldsBuoyancy soyfieldsBuoyancy;
typedef struct _soyfieldsBuoyancyClass soyfieldsBuoyancyClass;
typedef struct _soyfieldsBuoyancyPrivate soyfieldsBuoyancyPrivate;

#define SOY_FIELDS_TYPE_MONOPOLE (soy_fields_monopole_get_type ())
#define SOY_FIELDS_MONOPOLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_FIELDS_TYPE_MONOPOLE, soyfieldsMonopole))
#define SOY_FIELDS_MONOPOLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_FIELDS_TYPE_MONOPOLE, soyfieldsMonopoleClass))
#define SOY_FIELDS_IS_MONOPOLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_FIELDS_TYPE_MONOPOLE))
#define SOY_FIELDS_IS_MONOPOLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_FIELDS_TYPE_MONOPOLE))
#define SOY_FIELDS_MONOPOLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_FIELDS_TYPE_MONOPOLE, soyfieldsMonopoleClass))

typedef struct _soyfieldsMonopole soyfieldsMonopole;
typedef struct _soyfieldsMonopoleClass soyfieldsMonopoleClass;
typedef struct _soyfieldsMonopolePrivate soyfieldsMonopolePrivate;

#define SOY_FIELDS_TYPE_SHOCKWAVE (soy_fields_shockwave_get_type ())
#define SOY_FIELDS_SHOCKWAVE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_FIELDS_TYPE_SHOCKWAVE, soyfieldsShockwave))
#define SOY_FIELDS_SHOCKWAVE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_FIELDS_TYPE_SHOCKWAVE, soyfieldsShockwaveClass))
#define SOY_FIELDS_IS_SHOCKWAVE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_FIELDS_TYPE_SHOCKWAVE))
#define SOY_FIELDS_IS_SHOCKWAVE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_FIELDS_TYPE_SHOCKWAVE))
#define SOY_FIELDS_SHOCKWAVE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_FIELDS_TYPE_SHOCKWAVE, soyfieldsShockwaveClass))

typedef struct _soyfieldsShockwave soyfieldsShockwave;
typedef struct _soyfieldsShockwaveClass soyfieldsShockwaveClass;
typedef struct _soyfieldsShockwavePrivate soyfieldsShockwavePrivate;

#define SOY_FIELDS_TYPE_WIND (soy_fields_wind_get_type ())
#define SOY_FIELDS_WIND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_FIELDS_TYPE_WIND, soyfieldsWind))
#define SOY_FIELDS_WIND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_FIELDS_TYPE_WIND, soyfieldsWindClass))
#define SOY_FIELDS_IS_WIND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_FIELDS_TYPE_WIND))
#define SOY_FIELDS_IS_WIND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_FIELDS_TYPE_WIND))
#define SOY_FIELDS_WIND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_FIELDS_TYPE_WIND, soyfieldsWindClass))

typedef struct _soyfieldsWind soyfieldsWind;
typedef struct _soyfieldsWindClass soyfieldsWindClass;
typedef struct _soyfieldsWindPrivate soyfieldsWindPrivate;

#define SOY_JOINTS_TYPE_JOINT (soy_joints_joint_get_type ())
#define SOY_JOINTS_JOINT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_JOINTS_TYPE_JOINT, soyjointsJoint))
#define SOY_JOINTS_JOINT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_JOINTS_TYPE_JOINT, soyjointsJointClass))
#define SOY_JOINTS_IS_JOINT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_JOINTS_TYPE_JOINT))
#define SOY_JOINTS_IS_JOINT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_JOINTS_TYPE_JOINT))
#define SOY_JOINTS_JOINT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_JOINTS_TYPE_JOINT, soyjointsJointClass))

typedef struct _soyjointsJoint soyjointsJoint;
typedef struct _soyjointsJointClass soyjointsJointClass;
typedef struct _soyjointsJointPrivate soyjointsJointPrivate;

#define SOY_JOINTS_TYPE_BALL (soy_joints_ball_get_type ())
#define SOY_JOINTS_BALL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_JOINTS_TYPE_BALL, soyjointsBall))
#define SOY_JOINTS_BALL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_JOINTS_TYPE_BALL, soyjointsBallClass))
#define SOY_JOINTS_IS_BALL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_JOINTS_TYPE_BALL))
#define SOY_JOINTS_IS_BALL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_JOINTS_TYPE_BALL))
#define SOY_JOINTS_BALL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_JOINTS_TYPE_BALL, soyjointsBallClass))

typedef struct _soyjointsBall soyjointsBall;
typedef struct _soyjointsBallClass soyjointsBallClass;
typedef struct _soyjointsBallPrivate soyjointsBallPrivate;

#define SOY_JOINTS_TYPE_FIXED (soy_joints_fixed_get_type ())
#define SOY_JOINTS_FIXED(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_JOINTS_TYPE_FIXED, soyjointsFixed))
#define SOY_JOINTS_FIXED_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_JOINTS_TYPE_FIXED, soyjointsFixedClass))
#define SOY_JOINTS_IS_FIXED(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_JOINTS_TYPE_FIXED))
#define SOY_JOINTS_IS_FIXED_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_JOINTS_TYPE_FIXED))
#define SOY_JOINTS_FIXED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_JOINTS_TYPE_FIXED, soyjointsFixedClass))

typedef struct _soyjointsFixed soyjointsFixed;
typedef struct _soyjointsFixedClass soyjointsFixedClass;
typedef struct _soyjointsFixedPrivate soyjointsFixedPrivate;

#define SOY_JOINTS_TYPE_HINGE (soy_joints_hinge_get_type ())
#define SOY_JOINTS_HINGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_JOINTS_TYPE_HINGE, soyjointsHinge))
#define SOY_JOINTS_HINGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_JOINTS_TYPE_HINGE, soyjointsHingeClass))
#define SOY_JOINTS_IS_HINGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_JOINTS_TYPE_HINGE))
#define SOY_JOINTS_IS_HINGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_JOINTS_TYPE_HINGE))
#define SOY_JOINTS_HINGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_JOINTS_TYPE_HINGE, soyjointsHingeClass))

typedef struct _soyjointsHinge soyjointsHinge;
typedef struct _soyjointsHingeClass soyjointsHingeClass;
typedef struct _soyjointsHingePrivate soyjointsHingePrivate;

#define SOY_JOINTS_TYPE_HINGE2 (soy_joints_hinge2_get_type ())
#define SOY_JOINTS_HINGE2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_JOINTS_TYPE_HINGE2, soyjointsHinge2))
#define SOY_JOINTS_HINGE2_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_JOINTS_TYPE_HINGE2, soyjointsHinge2Class))
#define SOY_JOINTS_IS_HINGE2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_JOINTS_TYPE_HINGE2))
#define SOY_JOINTS_IS_HINGE2_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_JOINTS_TYPE_HINGE2))
#define SOY_JOINTS_HINGE2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_JOINTS_TYPE_HINGE2, soyjointsHinge2Class))

typedef struct _soyjointsHinge2 soyjointsHinge2;
typedef struct _soyjointsHinge2Class soyjointsHinge2Class;
typedef struct _soyjointsHinge2Private soyjointsHinge2Private;

#define SOY_JOINTS_TYPE_PISTON (soy_joints_piston_get_type ())
#define SOY_JOINTS_PISTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_JOINTS_TYPE_PISTON, soyjointsPiston))
#define SOY_JOINTS_PISTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_JOINTS_TYPE_PISTON, soyjointsPistonClass))
#define SOY_JOINTS_IS_PISTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_JOINTS_TYPE_PISTON))
#define SOY_JOINTS_IS_PISTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_JOINTS_TYPE_PISTON))
#define SOY_JOINTS_PISTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_JOINTS_TYPE_PISTON, soyjointsPistonClass))

typedef struct _soyjointsPiston soyjointsPiston;
typedef struct _soyjointsPistonClass soyjointsPistonClass;
typedef struct _soyjointsPistonPrivate soyjointsPistonPrivate;

#define SOY_JOINTS_TYPE_PLANE2_D (soy_joints_plane2_d_get_type ())
#define SOY_JOINTS_PLANE2_D(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_JOINTS_TYPE_PLANE2_D, soyjointsPlane2D))
#define SOY_JOINTS_PLANE2_D_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_JOINTS_TYPE_PLANE2_D, soyjointsPlane2DClass))
#define SOY_JOINTS_IS_PLANE2_D(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_JOINTS_TYPE_PLANE2_D))
#define SOY_JOINTS_IS_PLANE2_D_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_JOINTS_TYPE_PLANE2_D))
#define SOY_JOINTS_PLANE2_D_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_JOINTS_TYPE_PLANE2_D, soyjointsPlane2DClass))

typedef struct _soyjointsPlane2D soyjointsPlane2D;
typedef struct _soyjointsPlane2DClass soyjointsPlane2DClass;
typedef struct _soyjointsPlane2DPrivate soyjointsPlane2DPrivate;

#define SOY_JOINTS_TYPE_SLIDER (soy_joints_slider_get_type ())
#define SOY_JOINTS_SLIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_JOINTS_TYPE_SLIDER, soyjointsSlider))
#define SOY_JOINTS_SLIDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_JOINTS_TYPE_SLIDER, soyjointsSliderClass))
#define SOY_JOINTS_IS_SLIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_JOINTS_TYPE_SLIDER))
#define SOY_JOINTS_IS_SLIDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_JOINTS_TYPE_SLIDER))
#define SOY_JOINTS_SLIDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_JOINTS_TYPE_SLIDER, soyjointsSliderClass))

typedef struct _soyjointsSlider soyjointsSlider;
typedef struct _soyjointsSliderClass soyjointsSliderClass;
typedef struct _soyjointsSliderPrivate soyjointsSliderPrivate;

#define SOY_JOINTS_TYPE_UNIVERSAL (soy_joints_universal_get_type ())
#define SOY_JOINTS_UNIVERSAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_JOINTS_TYPE_UNIVERSAL, soyjointsUniversal))
#define SOY_JOINTS_UNIVERSAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_JOINTS_TYPE_UNIVERSAL, soyjointsUniversalClass))
#define SOY_JOINTS_IS_UNIVERSAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_JOINTS_TYPE_UNIVERSAL))
#define SOY_JOINTS_IS_UNIVERSAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_JOINTS_TYPE_UNIVERSAL))
#define SOY_JOINTS_UNIVERSAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_JOINTS_TYPE_UNIVERSAL, soyjointsUniversalClass))

typedef struct _soyjointsUniversal soyjointsUniversal;
typedef struct _soyjointsUniversalClass soyjointsUniversalClass;
typedef struct _soyjointsUniversalPrivate soyjointsUniversalPrivate;
typedef struct _soymaterialsMaterialPrivate soymaterialsMaterialPrivate;

#define SOY_MATERIALS_TYPE_COLORED (soy_materials_colored_get_type ())
#define SOY_MATERIALS_COLORED(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_MATERIALS_TYPE_COLORED, soymaterialsColored))
#define SOY_MATERIALS_COLORED_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_MATERIALS_TYPE_COLORED, soymaterialsColoredClass))
#define SOY_MATERIALS_IS_COLORED(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_MATERIALS_TYPE_COLORED))
#define SOY_MATERIALS_IS_COLORED_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_MATERIALS_TYPE_COLORED))
#define SOY_MATERIALS_COLORED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_MATERIALS_TYPE_COLORED, soymaterialsColoredClass))

typedef struct _soymaterialsColored soymaterialsColored;
typedef struct _soymaterialsColoredClass soymaterialsColoredClass;
typedef struct _soymaterialsColoredPrivate soymaterialsColoredPrivate;

#define SOY_MATERIALS_TYPE_TEXTURED (soy_materials_textured_get_type ())
#define SOY_MATERIALS_TEXTURED(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_MATERIALS_TYPE_TEXTURED, soymaterialsTextured))
#define SOY_MATERIALS_TEXTURED_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_MATERIALS_TYPE_TEXTURED, soymaterialsTexturedClass))
#define SOY_MATERIALS_IS_TEXTURED(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_MATERIALS_TYPE_TEXTURED))
#define SOY_MATERIALS_IS_TEXTURED_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_MATERIALS_TYPE_TEXTURED))
#define SOY_MATERIALS_TEXTURED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_MATERIALS_TYPE_TEXTURED, soymaterialsTexturedClass))

typedef struct _soymaterialsTextured soymaterialsTextured;
typedef struct _soymaterialsTexturedClass soymaterialsTexturedClass;
typedef struct _soymaterialsTexturedPrivate soymaterialsTexturedPrivate;

#define SOY_MATERIALS_TYPE_WIREFRAMED (soy_materials_wireframed_get_type ())
#define SOY_MATERIALS_WIREFRAMED(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_MATERIALS_TYPE_WIREFRAMED, soymaterialsWireframed))
#define SOY_MATERIALS_WIREFRAMED_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_MATERIALS_TYPE_WIREFRAMED, soymaterialsWireframedClass))
#define SOY_MATERIALS_IS_WIREFRAMED(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_MATERIALS_TYPE_WIREFRAMED))
#define SOY_MATERIALS_IS_WIREFRAMED_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_MATERIALS_TYPE_WIREFRAMED))
#define SOY_MATERIALS_WIREFRAMED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_MATERIALS_TYPE_WIREFRAMED, soymaterialsWireframedClass))

typedef struct _soymaterialsWireframed soymaterialsWireframed;
typedef struct _soymaterialsWireframedClass soymaterialsWireframedClass;
typedef struct _soymaterialsWireframedPrivate soymaterialsWireframedPrivate;

#define SOY_NET_TYPE_CLIENT (soy_net_client_get_type ())
#define SOY_NET_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_NET_TYPE_CLIENT, soynetClient))
#define SOY_NET_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_NET_TYPE_CLIENT, soynetClientClass))
#define SOY_NET_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_NET_TYPE_CLIENT))
#define SOY_NET_IS_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_NET_TYPE_CLIENT))
#define SOY_NET_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_NET_TYPE_CLIENT, soynetClientClass))

typedef struct _soynetClient soynetClient;
typedef struct _soynetClientClass soynetClientClass;
typedef struct _soynetClientPrivate soynetClientPrivate;

#define SOY_NET_TYPE_XMPP_AGENT (soy_net_xmpp_agent_get_type ())
#define SOY_NET_XMPP_AGENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_NET_TYPE_XMPP_AGENT, soynetXMPPAgent))
#define SOY_NET_XMPP_AGENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_NET_TYPE_XMPP_AGENT, soynetXMPPAgentClass))
#define SOY_NET_IS_XMPP_AGENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_NET_TYPE_XMPP_AGENT))
#define SOY_NET_IS_XMPP_AGENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_NET_TYPE_XMPP_AGENT))
#define SOY_NET_XMPP_AGENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_NET_TYPE_XMPP_AGENT, soynetXMPPAgentClass))

typedef struct _soynetXMPPAgent soynetXMPPAgent;
typedef struct _soynetXMPPAgentClass soynetXMPPAgentClass;

#define SOY_NET_TYPE_SERVER (soy_net_server_get_type ())
#define SOY_NET_SERVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_NET_TYPE_SERVER, soynetServer))
#define SOY_NET_SERVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_NET_TYPE_SERVER, soynetServerClass))
#define SOY_NET_IS_SERVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_NET_TYPE_SERVER))
#define SOY_NET_IS_SERVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_NET_TYPE_SERVER))
#define SOY_NET_SERVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_NET_TYPE_SERVER, soynetServerClass))

typedef struct _soynetServer soynetServer;
typedef struct _soynetServerClass soynetServerClass;
typedef struct _soynetServerPrivate soynetServerPrivate;

#define TYPE_CLIENT_DATA (client_data_get_type ())
#define CLIENT_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CLIENT_DATA, ClientData))
#define CLIENT_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_CLIENT_DATA, ClientDataClass))
#define IS_CLIENT_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CLIENT_DATA))
#define IS_CLIENT_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_CLIENT_DATA))
#define CLIENT_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CLIENT_DATA, ClientDataClass))

typedef struct _ClientData ClientData;
typedef struct _ClientDataClass ClientDataClass;
typedef struct _ClientDataPrivate ClientDataPrivate;

#define SOY_NET_TYPE_STATE (soy_net_state_get_type ())
typedef struct _soynetState soynetState;
typedef struct _soynetXMPPAgentPrivate soynetXMPPAgentPrivate;
typedef struct _soyscenesScenePrivate soyscenesScenePrivate;

#define SOY_SCENES_TYPE_LANDSCAPE (soy_scenes_landscape_get_type ())
#define SOY_SCENES_LANDSCAPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_SCENES_TYPE_LANDSCAPE, soyscenesLandscape))
#define SOY_SCENES_LANDSCAPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_SCENES_TYPE_LANDSCAPE, soyscenesLandscapeClass))
#define SOY_SCENES_IS_LANDSCAPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_SCENES_TYPE_LANDSCAPE))
#define SOY_SCENES_IS_LANDSCAPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_SCENES_TYPE_LANDSCAPE))
#define SOY_SCENES_LANDSCAPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_SCENES_TYPE_LANDSCAPE, soyscenesLandscapeClass))

typedef struct _soyscenesLandscape soyscenesLandscape;
typedef struct _soyscenesLandscapeClass soyscenesLandscapeClass;
typedef struct _soyscenesLandscapePrivate soyscenesLandscapePrivate;

#define SOY_SCENES_TYPE_PLANAR (soy_scenes_planar_get_type ())
#define SOY_SCENES_PLANAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_SCENES_TYPE_PLANAR, soyscenesPlanar))
#define SOY_SCENES_PLANAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_SCENES_TYPE_PLANAR, soyscenesPlanarClass))
#define SOY_SCENES_IS_PLANAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_SCENES_TYPE_PLANAR))
#define SOY_SCENES_IS_PLANAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_SCENES_TYPE_PLANAR))
#define SOY_SCENES_PLANAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_SCENES_TYPE_PLANAR, soyscenesPlanarClass))

typedef struct _soyscenesPlanar soyscenesPlanar;
typedef struct _soyscenesPlanarClass soyscenesPlanarClass;
typedef struct _soyscenesPlanarPrivate soyscenesPlanarPrivate;

#define SOY_SCENES_TYPE_ROOM (soy_scenes_room_get_type ())
#define SOY_SCENES_ROOM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_SCENES_TYPE_ROOM, soyscenesRoom))
#define SOY_SCENES_ROOM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_SCENES_TYPE_ROOM, soyscenesRoomClass))
#define SOY_SCENES_IS_ROOM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_SCENES_TYPE_ROOM))
#define SOY_SCENES_IS_ROOM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_SCENES_TYPE_ROOM))
#define SOY_SCENES_ROOM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_SCENES_TYPE_ROOM, soyscenesRoomClass))

typedef struct _soyscenesRoom soyscenesRoom;
typedef struct _soyscenesRoomClass soyscenesRoomClass;
typedef struct _soyscenesRoomPrivate soyscenesRoomPrivate;

#define SOY_TEXTURES_TYPE_CUBEMAP (soy_textures_cubemap_get_type ())
#define SOY_TEXTURES_CUBEMAP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_TEXTURES_TYPE_CUBEMAP, soytexturesCubemap))
#define SOY_TEXTURES_CUBEMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_TEXTURES_TYPE_CUBEMAP, soytexturesCubemapClass))
#define SOY_TEXTURES_IS_CUBEMAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_TEXTURES_TYPE_CUBEMAP))
#define SOY_TEXTURES_IS_CUBEMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_TEXTURES_TYPE_CUBEMAP))
#define SOY_TEXTURES_CUBEMAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_TEXTURES_TYPE_CUBEMAP, soytexturesCubemapClass))

typedef struct _soytexturesCubemap soytexturesCubemap;
typedef struct _soytexturesCubemapClass soytexturesCubemapClass;

#define SOY_SCENES_TYPE_TD_SIDE (soy_scenes_td_side_get_type ())
#define SOY_SCENES_TD_SIDE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_SCENES_TYPE_TD_SIDE, soyscenesTDSide))
#define SOY_SCENES_TD_SIDE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_SCENES_TYPE_TD_SIDE, soyscenesTDSideClass))
#define SOY_SCENES_IS_TD_SIDE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_SCENES_TYPE_TD_SIDE))
#define SOY_SCENES_IS_TD_SIDE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_SCENES_TYPE_TD_SIDE))
#define SOY_SCENES_TD_SIDE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_SCENES_TYPE_TD_SIDE, soyscenesTDSideClass))

typedef struct _soyscenesTDSide soyscenesTDSide;
typedef struct _soyscenesTDSideClass soyscenesTDSideClass;
typedef struct _soyscenesTDSidePrivate soyscenesTDSidePrivate;

#define SOY_TYPE_SG_K2_PNG_CONVERTER (soy_sg_k2_png_converter_get_type ())
#define SOY_SG_K2_PNG_CONVERTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_TYPE_SG_K2_PNG_CONVERTER, soySGK2PNGConverter))
#define SOY_SG_K2_PNG_CONVERTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_TYPE_SG_K2_PNG_CONVERTER, soySGK2PNGConverterClass))
#define SOY_IS_SG_K2_PNG_CONVERTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_TYPE_SG_K2_PNG_CONVERTER))
#define SOY_IS_SG_K2_PNG_CONVERTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_TYPE_SG_K2_PNG_CONVERTER))
#define SOY_SG_K2_PNG_CONVERTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_TYPE_SG_K2_PNG_CONVERTER, soySGK2PNGConverterClass))

typedef struct _soySGK2PNGConverter soySGK2PNGConverter;
typedef struct _soySGK2PNGConverterClass soySGK2PNGConverterClass;
typedef struct _soySGK2PNGConverterPrivate soySGK2PNGConverterPrivate;
typedef struct _soytexturesTexturePrivate soytexturesTexturePrivate;

#define SOY_TEXTURES_TYPE_BUMPMAP (soy_textures_bumpmap_get_type ())
#define SOY_TEXTURES_BUMPMAP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_TEXTURES_TYPE_BUMPMAP, soytexturesBumpmap))
#define SOY_TEXTURES_BUMPMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_TEXTURES_TYPE_BUMPMAP, soytexturesBumpmapClass))
#define SOY_TEXTURES_IS_BUMPMAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_TEXTURES_TYPE_BUMPMAP))
#define SOY_TEXTURES_IS_BUMPMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_TEXTURES_TYPE_BUMPMAP))
#define SOY_TEXTURES_BUMPMAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_TEXTURES_TYPE_BUMPMAP, soytexturesBumpmapClass))

typedef struct _soytexturesBumpmap soytexturesBumpmap;
typedef struct _soytexturesBumpmapClass soytexturesBumpmapClass;
typedef struct _soytexturesBumpmapPrivate soytexturesBumpmapPrivate;
typedef struct _soytexturesCubemapPrivate soytexturesCubemapPrivate;

#define SOY_TEXTURES_TYPE_HEIGHTMAP (soy_textures_heightmap_get_type ())
#define SOY_TEXTURES_HEIGHTMAP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_TEXTURES_TYPE_HEIGHTMAP, soytexturesHeightmap))
#define SOY_TEXTURES_HEIGHTMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_TEXTURES_TYPE_HEIGHTMAP, soytexturesHeightmapClass))
#define SOY_TEXTURES_IS_HEIGHTMAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_TEXTURES_TYPE_HEIGHTMAP))
#define SOY_TEXTURES_IS_HEIGHTMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_TEXTURES_TYPE_HEIGHTMAP))
#define SOY_TEXTURES_HEIGHTMAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_TEXTURES_TYPE_HEIGHTMAP, soytexturesHeightmapClass))

typedef struct _soytexturesHeightmap soytexturesHeightmap;
typedef struct _soytexturesHeightmapClass soytexturesHeightmapClass;
typedef struct _soytexturesHeightmapPrivate soytexturesHeightmapPrivate;

#define SOY_TYPE_ITERATOR_WRAPPER (soy_iterator_wrapper_get_type ())
#define SOY_ITERATOR_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_TYPE_ITERATOR_WRAPPER, soyIteratorWrapper))
#define SOY_ITERATOR_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_TYPE_ITERATOR_WRAPPER, soyIteratorWrapperClass))
#define SOY_IS_ITERATOR_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_TYPE_ITERATOR_WRAPPER))
#define SOY_IS_ITERATOR_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_TYPE_ITERATOR_WRAPPER))
#define SOY_ITERATOR_WRAPPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_TYPE_ITERATOR_WRAPPER, soyIteratorWrapperClass))

typedef struct _soyIteratorWrapper soyIteratorWrapper;
typedef struct _soyIteratorWrapperClass soyIteratorWrapperClass;
typedef struct _soyIteratorWrapperPrivate soyIteratorWrapperPrivate;
typedef struct _soywidgetsWidgetPrivate soywidgetsWidgetPrivate;
typedef struct _soywidgetsContainerPrivate soywidgetsContainerPrivate;

#define SOY_WIDGETS_TYPE_BRANCH (soy_widgets_branch_get_type ())
#define SOY_WIDGETS_BRANCH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_WIDGETS_TYPE_BRANCH, soywidgetsBranch))
#define SOY_WIDGETS_BRANCH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_WIDGETS_TYPE_BRANCH, soywidgetsBranchClass))
#define SOY_WIDGETS_IS_BRANCH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_WIDGETS_TYPE_BRANCH))
#define SOY_WIDGETS_IS_BRANCH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_WIDGETS_TYPE_BRANCH))
#define SOY_WIDGETS_BRANCH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_WIDGETS_TYPE_BRANCH, soywidgetsBranchClass))

typedef struct _soywidgetsBranch soywidgetsBranch;
typedef struct _soywidgetsBranchClass soywidgetsBranchClass;
typedef struct _soywidgetsBranchPrivate soywidgetsBranchPrivate;

#define SOY_WIDGETS_TYPE_CANVAS (soy_widgets_canvas_get_type ())
#define SOY_WIDGETS_CANVAS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_WIDGETS_TYPE_CANVAS, soywidgetsCanvas))
#define SOY_WIDGETS_CANVAS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_WIDGETS_TYPE_CANVAS, soywidgetsCanvasClass))
#define SOY_WIDGETS_IS_CANVAS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_WIDGETS_TYPE_CANVAS))
#define SOY_WIDGETS_IS_CANVAS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_WIDGETS_TYPE_CANVAS))
#define SOY_WIDGETS_CANVAS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_WIDGETS_TYPE_CANVAS, soywidgetsCanvasClass))

typedef struct _soywidgetsCanvas soywidgetsCanvas;
typedef struct _soywidgetsCanvasClass soywidgetsCanvasClass;
typedef struct _soywidgetsCanvasPrivate soywidgetsCanvasPrivate;

#define SOY_WIDGETS_TYPE_HBOX (soy_widgets_hbox_get_type ())
#define SOY_WIDGETS_HBOX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_WIDGETS_TYPE_HBOX, soywidgetsHBox))
#define SOY_WIDGETS_HBOX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_WIDGETS_TYPE_HBOX, soywidgetsHBoxClass))
#define SOY_WIDGETS_IS_HBOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_WIDGETS_TYPE_HBOX))
#define SOY_WIDGETS_IS_HBOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_WIDGETS_TYPE_HBOX))
#define SOY_WIDGETS_HBOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_WIDGETS_TYPE_HBOX, soywidgetsHBoxClass))

typedef struct _soywidgetsHBox soywidgetsHBox;
typedef struct _soywidgetsHBoxClass soywidgetsHBoxClass;
typedef struct _soywidgetsHBoxPrivate soywidgetsHBoxPrivate;

#define SOY_WIDGETS_TYPE_SCROLLER (soy_widgets_scroller_get_type ())
#define SOY_WIDGETS_SCROLLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_WIDGETS_TYPE_SCROLLER, soywidgetsScroller))
#define SOY_WIDGETS_SCROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_WIDGETS_TYPE_SCROLLER, soywidgetsScrollerClass))
#define SOY_WIDGETS_IS_SCROLLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_WIDGETS_TYPE_SCROLLER))
#define SOY_WIDGETS_IS_SCROLLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_WIDGETS_TYPE_SCROLLER))
#define SOY_WIDGETS_SCROLLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_WIDGETS_TYPE_SCROLLER, soywidgetsScrollerClass))

typedef struct _soywidgetsScroller soywidgetsScroller;
typedef struct _soywidgetsScrollerClass soywidgetsScrollerClass;
typedef struct _soywidgetsScrollerPrivate soywidgetsScrollerPrivate;

#define SOY_WIDGETS_TYPE_HSCROLL (soy_widgets_hscroll_get_type ())
#define SOY_WIDGETS_HSCROLL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_WIDGETS_TYPE_HSCROLL, soywidgetsHScroll))
#define SOY_WIDGETS_HSCROLL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_WIDGETS_TYPE_HSCROLL, soywidgetsHScrollClass))
#define SOY_WIDGETS_IS_HSCROLL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_WIDGETS_TYPE_HSCROLL))
#define SOY_WIDGETS_IS_HSCROLL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_WIDGETS_TYPE_HSCROLL))
#define SOY_WIDGETS_HSCROLL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_WIDGETS_TYPE_HSCROLL, soywidgetsHScrollClass))

typedef struct _soywidgetsHScroll soywidgetsHScroll;
typedef struct _soywidgetsHScrollClass soywidgetsHScrollClass;
typedef struct _soywidgetsHScrollPrivate soywidgetsHScrollPrivate;

#define SOY_WIDGETS_TYPE_PROJECTOR (soy_widgets_projector_get_type ())
#define SOY_WIDGETS_PROJECTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_WIDGETS_TYPE_PROJECTOR, soywidgetsProjector))
#define SOY_WIDGETS_PROJECTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_WIDGETS_TYPE_PROJECTOR, soywidgetsProjectorClass))
#define SOY_WIDGETS_IS_PROJECTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_WIDGETS_TYPE_PROJECTOR))
#define SOY_WIDGETS_IS_PROJECTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_WIDGETS_TYPE_PROJECTOR))
#define SOY_WIDGETS_PROJECTOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_WIDGETS_TYPE_PROJECTOR, soywidgetsProjectorClass))

typedef struct _soywidgetsProjector soywidgetsProjector;
typedef struct _soywidgetsProjectorClass soywidgetsProjectorClass;
typedef struct _soywidgetsProjectorPrivate soywidgetsProjectorPrivate;

#define SOY_WIDGETS_TYPE_VBOX (soy_widgets_vbox_get_type ())
#define SOY_WIDGETS_VBOX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_WIDGETS_TYPE_VBOX, soywidgetsVBox))
#define SOY_WIDGETS_VBOX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_WIDGETS_TYPE_VBOX, soywidgetsVBoxClass))
#define SOY_WIDGETS_IS_VBOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_WIDGETS_TYPE_VBOX))
#define SOY_WIDGETS_IS_VBOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_WIDGETS_TYPE_VBOX))
#define SOY_WIDGETS_VBOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_WIDGETS_TYPE_VBOX, soywidgetsVBoxClass))

typedef struct _soywidgetsVBox soywidgetsVBox;
typedef struct _soywidgetsVBoxClass soywidgetsVBoxClass;
typedef struct _soywidgetsVBoxPrivate soywidgetsVBoxPrivate;

#define SOY_WIDGETS_TYPE_VSCROLL (soy_widgets_vscroll_get_type ())
#define SOY_WIDGETS_VSCROLL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SOY_WIDGETS_TYPE_VSCROLL, soywidgetsVScroll))
#define SOY_WIDGETS_VSCROLL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SOY_WIDGETS_TYPE_VSCROLL, soywidgetsVScrollClass))
#define SOY_WIDGETS_IS_VSCROLL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SOY_WIDGETS_TYPE_VSCROLL))
#define SOY_WIDGETS_IS_VSCROLL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SOY_WIDGETS_TYPE_VSCROLL))
#define SOY_WIDGETS_VSCROLL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SOY_WIDGETS_TYPE_VSCROLL, soywidgetsVScrollClass))

typedef struct _soywidgetsVScroll soywidgetsVScroll;
typedef struct _soywidgetsVScrollClass soywidgetsVScrollClass;
typedef struct _soywidgetsVScrollPrivate soywidgetsVScrollPrivate;
typedef struct _soywidgetsWindowPrivate soywidgetsWindowPrivate;

typedef GObject* (*soyloadable_func) (const gchar* packet);
struct _soyatomsArea {
	GObject parent_instance;
	soyatomsAreaPrivate * priv;
};

struct _soyatomsAreaClass {
	GObjectClass parent_class;
};

struct _soyatomsAxis {
	GObject parent_instance;
	soyatomsAxisPrivate * priv;
};

struct _soyatomsAxisClass {
	GObjectClass parent_class;
};

struct _soyatomsColor {
	GObject parent_instance;
	soyatomsColorPrivate * priv;
};

struct _soyatomsColorClass {
	GObjectClass parent_class;
};

typedef enum  {
	SOY_MATH_OPERATOR_ADD,
	SOY_MATH_OPERATOR_SUB,
	SOY_MATH_OPERATOR_MUL,
	SOY_MATH_OPERATOR_DIV,
	SOY_MATH_OPERATOR_MOD,
	SOY_MATH_OPERATOR_OR,
	SOY_MATH_OPERATOR_AND
} soyMathOperator;

typedef enum  {
	SOY_COMPARISON_LT,
	SOY_COMPARISON_LE,
	SOY_COMPARISON_NE,
	SOY_COMPARISON_EQ,
	SOY_COMPARISON_GT,
	SOY_COMPARISON_GE
} soyComparison;

struct _soyatomsColorColormap {
	GeeHashMap parent_instance;
	soyatomsColorColormapPrivate * priv;
};

struct _soyatomsColorColormapClass {
	GeeHashMapClass parent_class;
};

struct _soyatomsFace {
	GObject parent_instance;
	soyatomsFacePrivate * priv;
};

struct _soyatomsFaceClass {
	GObjectClass parent_class;
};

struct _soyatomsMorph {
	GObject parent_instance;
	soyatomsMorphPrivate * priv;
};

struct _soyatomsMorphClass {
	GObjectClass parent_class;
};

struct _soyatomsPosition {
	GObject parent_instance;
	soyatomsPositionPrivate * priv;
};

struct _soyatomsPositionClass {
	GObjectClass parent_class;
};

struct _soyatomsRadius {
	GObject parent_instance;
	soyatomsRadiusPrivate * priv;
};

struct _soyatomsRadiusClass {
	GObjectClass parent_class;
};

struct _soyatomsRotation {
	GObject parent_instance;
	soyatomsRotationPrivate * priv;
};

struct _soyatomsRotationClass {
	GObjectClass parent_class;
};

struct _soyatomsSize {
	GObject parent_instance;
	soyatomsSizePrivate * priv;
};

struct _soyatomsSizeClass {
	GObjectClass parent_class;
};

struct _soyatomsVector {
	GObject parent_instance;
	soyatomsVectorPrivate * priv;
};

struct _soyatomsVectorClass {
	GObjectClass parent_class;
};

struct _soyatomsVertex {
	GObject parent_instance;
	soyatomsVertexPrivate * priv;
};

struct _soyatomsVertexClass {
	GObjectClass parent_class;
};

struct _soybodiesBody {
	GObject parent_instance;
	soybodiesBodyPrivate * priv;
	struct dxBody* body;
	GLfloat* fogcoords;
	gint fogcoords_length1;
	struct dxGeom* geom;
	gchar* key;
	GMutex mutex;
	GLfloat* tslvs;
	gint tslvs_length1;
	soyscenesScene* scene;
	GeeHashMap* tags_;
};

struct _soybodiesBodyClass {
	GObjectClass parent_class;
	void (*create_geom) (soybodiesBody* self, GObject* geom_param, gfloat geom_scalar);
	void (*set_mass) (soybodiesBody* self, gfloat density);
	void (*add_extra) (soybodiesBody* self);
	void (*remove_extra) (soybodiesBody* self);
	gfloat (*pointDepth) (soybodiesBody* self, gfloat x, gfloat y, gfloat z);
	gfloat (*volume) (soybodiesBody* self);
	gint (*finite) (soybodiesBody* self);
	void (*mult_model_matrix) (soybodiesBody* self);
	void (*render) (soybodiesBody* self, gboolean alpha_stage, soybodiesCamera* camera, gint level);
	gfloat (*get_col_radius) (soybodiesBody* self);
};

struct _soybodiesBillboard {
	soybodiesBody parent_instance;
	soybodiesBillboardPrivate * priv;
};

struct _soybodiesBillboardClass {
	soybodiesBodyClass parent_class;
};

struct _soybodiesBox {
	soybodiesBody parent_instance;
	soybodiesBoxPrivate * priv;
};

struct _soybodiesBoxClass {
	soybodiesBodyClass parent_class;
};

struct _soybodiesCamera {
	soybodiesBody parent_instance;
	soybodiesCameraPrivate * priv;
};

struct _soybodiesCameraClass {
	soybodiesBodyClass parent_class;
};

struct _soybodiesCylinder {
	soybodiesBody parent_instance;
	soybodiesCylinderPrivate * priv;
	gint SLICES;
	gint LIMIT;
};

struct _soybodiesCylinderClass {
	soybodiesBodyClass parent_class;
};

struct _soybodiesLight {
	soybodiesBody parent_instance;
	soybodiesLightPrivate * priv;
	GLuint VERTICES;
};

struct _soybodiesLightClass {
	soybodiesBodyClass parent_class;
};

struct _soybodiesMesh {
	soybodiesBody parent_instance;
	soybodiesMeshPrivate * priv;
};

struct _soybodiesMeshClass {
	soybodiesBodyClass parent_class;
};

struct _soybodiesPortal {
	soybodiesBody parent_instance;
	soybodiesPortalPrivate * priv;
};

struct _soybodiesPortalClass {
	soybodiesBodyClass parent_class;
};

struct _soybodiesSphere {
	soybodiesBody parent_instance;
	soybodiesSpherePrivate * priv;
};

struct _soybodiesSphereClass {
	soybodiesBodyClass parent_class;
};

struct _soycontrollersController {
	GObject parent_instance;
	soycontrollersControllerPrivate * priv;
};

struct _soycontrollersControllerClass {
	GObjectClass parent_class;
	gchar* (*tp_repr) (soycontrollersController* self);
};

struct _soycontrollersVirtualController {
	soycontrollersController parent_instance;
	soycontrollersVirtualControllerPrivate * priv;
	soyscenesScene* scene;
};

struct _soycontrollersVirtualControllerClass {
	soycontrollersControllerClass parent_class;
	void (*run_controller) (soycontrollersVirtualController* self);
	void (*unregister_controller) (soycontrollersVirtualController* self);
	void (*register_controller) (soycontrollersVirtualController* self);
	gboolean (*get_registered) (soycontrollersVirtualController* self);
	void (*set_registered) (soycontrollersVirtualController* self, gboolean value);
	gboolean (*get_finished) (soycontrollersVirtualController* self);
};

struct _soycontrollersPathfollower {
	soycontrollersVirtualController parent_instance;
	soycontrollersPathfollowerPrivate * priv;
	soybodiesBody* controlled;
	GRecMutex path_lock;
	GMutex pause_lock;
};

struct _soycontrollersPathfollowerClass {
	soycontrollersVirtualControllerClass parent_class;
	void (*path_finished) (soycontrollersPathfollower* self, struct dxBody* body);
	void (*waypoint_reached) (soycontrollersPathfollower* self, struct dxBody* body, soyatomsVector* next_vec, gfloat dist);
	void (*between_waypoints) (soycontrollersPathfollower* self, struct dxBody* body, soyatomsVector* next_vec, gfloat dist);
	void (*skipped) (soycontrollersPathfollower* self, struct dxBody* body);
	gfloat (*get_speed) (soycontrollersPathfollower* self);
	void (*set_speed) (soycontrollersPathfollower* self, gfloat value);
};

struct _soycontrollersgraphINodeIface {
	GTypeInterface parent_iface;
	GeeList* (*get_edges) (soycontrollersgraphINode* self);
	soyatomsPosition* (*get_position) (soycontrollersgraphINode* self);
};

struct _soycontrollersgraphIGraphIface {
	GTypeInterface parent_iface;
	soycontrollersgraphINode* (*get_node) (soycontrollersgraphIGraph* self, soyatomsPosition* pos);
	soycontrollersgraphINode* (*add_terminal_node) (soycontrollersgraphIGraph* self, soyatomsPosition* pos);
	gboolean* (*check_collisions) (soycontrollersgraphIGraph* self, soyatomsPosition* start, soyatomsPosition** ends, int ends_length1, int* result_length1);
};

struct _soycontrollersBaseNavigator {
	soycontrollersPathfollower parent_instance;
	soycontrollersBaseNavigatorPrivate * priv;
	soycontrollersgraphIGraph* graph;
	GSource* source;
};

struct _soycontrollersBaseNavigatorClass {
	soycontrollersPathfollowerClass parent_class;
};

struct _soycontrollersDualshock3 {
	soycontrollersController parent_instance;
	soycontrollersDualshock3Private * priv;
};

struct _soycontrollersDualshock3Class {
	soycontrollersControllerClass parent_class;
};

struct _soycontrollersGridNavigator {
	soycontrollersBaseNavigator parent_instance;
	soycontrollersGridNavigatorPrivate * priv;
};

struct _soycontrollersGridNavigatorClass {
	soycontrollersBaseNavigatorClass parent_class;
};

struct _soycontrollersKeyboard {
	soycontrollersController parent_instance;
	soycontrollersKeyboardPrivate * priv;
};

struct _soycontrollersKeyboardClass {
	soycontrollersControllerClass parent_class;
};

struct _soycontrollersPointer {
	soycontrollersController parent_instance;
	soycontrollersPointerPrivate * priv;
};

struct _soycontrollersPointerClass {
	soycontrollersControllerClass parent_class;
};

struct _soycontrollersSpaceNavigator {
	soycontrollersBaseNavigator parent_instance;
	soycontrollersSpaceNavigatorPrivate * priv;
};

struct _soycontrollersSpaceNavigatorClass {
	soycontrollersBaseNavigatorClass parent_class;
};

struct _soycontrollersWiimote {
	soycontrollersController parent_instance;
	soycontrollersWiimotePrivate * priv;
};

struct _soycontrollersWiimoteClass {
	soycontrollersControllerClass parent_class;
};

struct _soycontrollersgraphAbstractGraph {
	GObject parent_instance;
	soycontrollersgraphAbstractGraphPrivate * priv;
};

struct _soycontrollersgraphAbstractGraphClass {
	GObjectClass parent_class;
	gboolean* (*check_collisions) (soycontrollersgraphAbstractGraph* self, soyatomsPosition* start, soyatomsPosition** ends, int ends_length1, int* result_length1);
};

struct _soycontrollersgraphEdge {
	GTypeInstance parent_instance;
	volatile int ref_count;
	soycontrollersgraphEdgePrivate * priv;
	gfloat distance;
	gfloat total_cost;
	soycontrollersgraphINode* begin;
	soycontrollersgraphINode* end;
};

struct _soycontrollersgraphEdgeClass {
	GTypeClass parent_class;
	void (*finalize) (soycontrollersgraphEdge *self);
};

struct _soycontrollersgraphGrid {
	soycontrollersgraphAbstractGraph parent_instance;
	soycontrollersgraphGridPrivate * priv;
};

struct _soycontrollersgraphGridClass {
	soycontrollersgraphAbstractGraphClass parent_class;
	soycontrollersgraphINode* (*add_terminal_node) (soycontrollersgraphGrid* self, soyatomsPosition* pos);
};

struct _soycontrollersgraph_gridOffsetPair {
	GObject parent_instance;
	soycontrollersgraph_gridOffsetPairPrivate * priv;
	gint x;
	gint y;
};

struct _soycontrollersgraph_gridOffsetPairClass {
	GObjectClass parent_class;
};

struct _soycontrollersgraph_gridIntNode {
	GObject parent_instance;
	soycontrollersgraph_gridIntNodePrivate * priv;
};

struct _soycontrollersgraph_gridIntNodeClass {
	GObjectClass parent_class;
	void (*add_connection) (soycontrollersgraph_gridIntNode* self, soycontrollersgraphINode* other);
	GeeList* (*get_edges) (soycontrollersgraph_gridIntNode* self);
	guint (*hash) (soycontrollersgraph_gridIntNode* self);
};

struct _soycontrollersgraph_gridTerminalNode {
	GObject parent_instance;
	soycontrollersgraph_gridTerminalNodePrivate * priv;
};

struct _soycontrollersgraph_gridTerminalNodeClass {
	GObjectClass parent_class;
	GeeList* (*get_edges) (soycontrollersgraph_gridTerminalNode* self);
	void (*add_connection) (soycontrollersgraph_gridTerminalNode* self, soycontrollersgraphINode* other);
};

struct _soycontrollersgraphPathfinder {
	GObject parent_instance;
	soycontrollersgraphPathfinderPrivate * priv;
};

struct _soycontrollersgraphPathfinderClass {
	GObjectClass parent_class;
};

struct _soycontrollersgraphSpace {
	soycontrollersgraphAbstractGraph parent_instance;
	soycontrollersgraphSpacePrivate * priv;
};

struct _soycontrollersgraphSpaceClass {
	soycontrollersgraphAbstractGraphClass parent_class;
	soycontrollersgraphINode* (*add_terminal_node) (soycontrollersgraphSpace* self, soyatomsPosition* pos);
};

struct _soycontrollersgraph_spaceOffsetTriple {
	GObject parent_instance;
	soycontrollersgraph_spaceOffsetTriplePrivate * priv;
	gint x;
	gint y;
	gint z;
};

struct _soycontrollersgraph_spaceOffsetTripleClass {
	GObjectClass parent_class;
};

struct _soycontrollersgraph_spaceInt3Node {
	GObject parent_instance;
	soycontrollersgraph_spaceInt3NodePrivate * priv;
};

struct _soycontrollersgraph_spaceInt3NodeClass {
	GObjectClass parent_class;
	void (*add_connection) (soycontrollersgraph_spaceInt3Node* self, soycontrollersgraphINode* other);
	GeeList* (*get_edges) (soycontrollersgraph_spaceInt3Node* self);
	guint (*hash) (soycontrollersgraph_spaceInt3Node* self);
};

struct _soycontrollersgraph_spaceTerminalNode {
	GObject parent_instance;
	soycontrollersgraph_spaceTerminalNodePrivate * priv;
};

struct _soycontrollersgraph_spaceTerminalNodeClass {
	GObjectClass parent_class;
	GeeList* (*get_edges) (soycontrollersgraph_spaceTerminalNode* self);
	void (*add_connection) (soycontrollersgraph_spaceTerminalNode* self, soycontrollersgraphINode* other);
};

typedef enum  {
	SOY_EVENT_TYPE_KeyPress,
	SOY_EVENT_TYPE_KeyDown,
	SOY_EVENT_TYPE_KeyRelease,
	SOY_EVENT_TYPE_Motion,
	SOY_EVENT_TYPE_ButtonPress,
	SOY_EVENT_TYPE_ButtonRelease,
	SOY_EVENT_TYPE_Scroll,
	SOY_EVENT_TYPE_WiimoteButtonPress
} soyEventType;

struct _soyeventsButton {
	soyEventType type;
	soywidgetsWindow* window;
	guint32 time;
	gfloat x;
	gfloat y;
	gfloat x_root;
	gfloat y_root;
	guint button;
	gchar* wiibutton;
};

struct _soyeventsEvent {
	GObject parent_instance;
	soyeventsEventPrivate * priv;
};

struct _soyeventsEventClass {
	GObjectClass parent_class;
};

struct _soyeventsDevice {
	soyeventsEvent parent_instance;
	soyeventsDevicePrivate * priv;
	gint detail;
};

struct _soyeventsDeviceClass {
	soyeventsEventClass parent_class;
};

struct _soyeventsButtonPress {
	soyeventsDevice parent_instance;
	soyeventsButtonPressPrivate * priv;
};

struct _soyeventsButtonPressClass {
	soyeventsDeviceClass parent_class;
};

struct _soyeventsButtonRelease {
	soyeventsDevice parent_instance;
	soyeventsButtonReleasePrivate * priv;
};

struct _soyeventsButtonReleaseClass {
	soyeventsDeviceClass parent_class;
};

struct _soyeventsKeyPress {
	soyeventsDevice parent_instance;
	soyeventsKeyPressPrivate * priv;
};

struct _soyeventsKeyPressClass {
	soyeventsDeviceClass parent_class;
};

struct _soyeventsKeyRelease {
	soyeventsDevice parent_instance;
	soyeventsKeyReleasePrivate * priv;
};

struct _soyeventsKeyReleaseClass {
	soyeventsDeviceClass parent_class;
};

struct _soyeventsMotion {
	soyEventType type;
	soywidgetsWindow* window;
	guint32 time;
	gfloat x;
	gfloat y;
	gfloat x_root;
	gfloat y_root;
};

typedef enum  {
	SOY_SCROLL_DIRECTION_Up,
	SOY_SCROLL_DIRECTION_Down,
	SOY_SCROLL_DIRECTION_Left,
	SOY_SCROLL_DIRECTION_Right
} soyScrollDirection;

struct _soyeventsScroll {
	soyEventType type;
	soywidgetsWindow* window;
	guint32 time;
	gfloat x;
	gfloat y;
	gfloat x_root;
	gfloat y_root;
	soyScrollDirection direction;
};

struct _soyeventsWiibutton {
	soyEventType type;
	guint16 wiibutton;
};

struct _soyfieldsField {
	soybodiesBody parent_instance;
	soyfieldsFieldPrivate * priv;
};

struct _soyfieldsFieldClass {
	soybodiesBodyClass parent_class;
	gboolean (*exert) (soyfieldsField* self, soybodiesBody* other);
	void (*give) (soyfieldsField* self, gint data);
	void (*commit) (soyfieldsField* self);
};

struct _soyfieldsAccelerate {
	soyfieldsField parent_instance;
	soyfieldsAcceleratePrivate * priv;
};

struct _soyfieldsAccelerateClass {
	soyfieldsFieldClass parent_class;
};

struct _soyfieldsBuoyancy {
	soyfieldsField parent_instance;
	soyfieldsBuoyancyPrivate * priv;
};

struct _soyfieldsBuoyancyClass {
	soyfieldsFieldClass parent_class;
};

struct _soyfieldsMonopole {
	soyfieldsField parent_instance;
	soyfieldsMonopolePrivate * priv;
};

struct _soyfieldsMonopoleClass {
	soyfieldsFieldClass parent_class;
};

struct _soyfieldsShockwave {
	soyfieldsField parent_instance;
	soyfieldsShockwavePrivate * priv;
};

struct _soyfieldsShockwaveClass {
	soyfieldsFieldClass parent_class;
};

struct _soyfieldsWind {
	soyfieldsField parent_instance;
	soyfieldsWindPrivate * priv;
};

struct _soyfieldsWindClass {
	soyfieldsFieldClass parent_class;
};

struct _soyjointsJoint {
	GObject parent_instance;
	soyjointsJointPrivate * priv;
	struct dxJoint* joint;
	soybodiesBody* bodyA;
	soybodiesBody* bodyB;
	GMutex mutex;
};

struct _soyjointsJointClass {
	GObjectClass parent_class;
	void (*create) (soyjointsJoint* self);
	void (*setup) (soyjointsJoint* self, soyatomsPosition* anchor, soyatomsAxis* axis1, soyatomsAxis* axis2);
	void (*gen_matrices) (soyjointsJoint* self);
	void (*render) (soyjointsJoint* self);
	void (*mult_model_matrix) (soyjointsJoint* self);
	void (*mult_model_matrix_A) (soyjointsJoint* self);
	void (*mult_model_matrix_B) (soyjointsJoint* self);
};

struct _soyjointsBall {
	soyjointsJoint parent_instance;
	soyjointsBallPrivate * priv;
};

struct _soyjointsBallClass {
	soyjointsJointClass parent_class;
};

struct _soyjointsFixed {
	soyjointsJoint parent_instance;
	soyjointsFixedPrivate * priv;
};

struct _soyjointsFixedClass {
	soyjointsJointClass parent_class;
};

struct _soyjointsHinge {
	soyjointsJoint parent_instance;
	soyjointsHingePrivate * priv;
};

struct _soyjointsHingeClass {
	soyjointsJointClass parent_class;
};

struct _soyjointsHinge2 {
	soyjointsJoint parent_instance;
	soyjointsHinge2Private * priv;
};

struct _soyjointsHinge2Class {
	soyjointsJointClass parent_class;
};

struct _soyjointsPiston {
	soyjointsJoint parent_instance;
	soyjointsPistonPrivate * priv;
};

struct _soyjointsPistonClass {
	soyjointsJointClass parent_class;
};

struct _soyjointsPlane2D {
	soyjointsJoint parent_instance;
	soyjointsPlane2DPrivate * priv;
};

struct _soyjointsPlane2DClass {
	soyjointsJointClass parent_class;
};

struct _soyjointsSlider {
	soyjointsJoint parent_instance;
	soyjointsSliderPrivate * priv;
};

struct _soyjointsSliderClass {
	soyjointsJointClass parent_class;
};

struct _soyjointsUniversal {
	soyjointsJoint parent_instance;
	soyjointsUniversalPrivate * priv;
};

struct _soyjointsUniversalClass {
	soyjointsJointClass parent_class;
};

struct _soymaterialsMaterial {
	GObject parent_instance;
	soymaterialsMaterialPrivate * priv;
	gboolean needsTSLVs;
	gboolean translucent;
};

struct _soymaterialsMaterialClass {
	GObjectClass parent_class;
	gboolean (*render) (soymaterialsMaterial* self, gint step, GLvoid* tslvs, dxMatrix3* texmatrix);
	GLenum* (*get_draw_mode) (soymaterialsMaterial* self);
};

struct _soymaterialsColored {
	soymaterialsMaterial parent_instance;
	soymaterialsColoredPrivate * priv;
};

struct _soymaterialsColoredClass {
	soymaterialsMaterialClass parent_class;
};

struct _soymaterialsTextured {
	soymaterialsColored parent_instance;
	soymaterialsTexturedPrivate * priv;
};

struct _soymaterialsTexturedClass {
	soymaterialsColoredClass parent_class;
};

struct _soymaterialsWireframed {
	soymaterialsColored parent_instance;
	soymaterialsWireframedPrivate * priv;
};

struct _soymaterialsWireframedClass {
	soymaterialsColoredClass parent_class;
};

struct _soynetClient {
	GObject parent_instance;
	soynetClientPrivate * priv;
	gchar* server_jid;
	gchar* username;
	gchar* password;
	LmConnection* connection;
	soynetXMPPAgent* agent;
	soywidgetsWindow* window;
	soyscenesScene* scene;
	gchar* sid;
	guint stream_id;
	gboolean connected;
	soyatomsColor* glow;
	soyatomsColor* glow2;
	gfloat glow_amt;
	gchar** ids;
	gint ids_length1;
};

struct _soynetClientClass {
	GObjectClass parent_class;
};

struct _soynetServer {
	GObject parent_instance;
	soynetServerPrivate * priv;
	gchar* username;
	gchar* password;
	LmConnection* connection;
	soynetXMPPAgent* agent;
	gchar* sid;
	guint stream_id;
	gchar* client_jid;
	GeeHashMap* clients;
	GSList* rcands;
};

struct _soynetServerClass {
	GObjectClass parent_class;
};

struct _ClientData {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ClientDataPrivate * priv;
	gchar* jid;
	gchar* sid;
	GSList* cands;
};

struct _ClientDataClass {
	GTypeClass parent_class;
	void (*finalize) (ClientData *self);
};

struct _soynetState {
	gint numObjects;
	void* objects;
};

struct _soynetXMPPAgent {
	GObject parent_instance;
	soynetXMPPAgentPrivate * priv;
	NiceAgent* agent;
	GSList* lcands;
	GSList* rcands;
};

struct _soynetXMPPAgentClass {
	GObjectClass parent_class;
};

struct _soyscenesScene {
	GObject parent_instance;
	soyscenesScenePrivate * priv;
	struct dxSpace* space;
	GeeHashSet* lights;
	GeeHashMap* bodies;
	GeeArrayList* joints;
	GeeHashSet* Controllers;
	GeeHashMap* fields;
	GLfloat* tslvs;
	gint tslvs_length1;
	GLfloat* colTexels;
};

struct _soyscenesSceneClass {
	GObjectClass parent_class;
	void (*do_in_step) (soyscenesScene* self);
	void (*render) (soyscenesScene* self, GLfloat fov, GLfloat aspect, GLfloat znear, GLfloat zfar, soybodiesCamera* camera, gint level);
	void (*render_extra) (soyscenesScene* self);
};

struct _soyscenesLandscape {
	soyscenesScene parent_instance;
	soyscenesLandscapePrivate * priv;
	GMutex mutex;
};

struct _soyscenesLandscapeClass {
	soyscenesSceneClass parent_class;
};

struct _soyscenesPlanar {
	soyscenesScene parent_instance;
	soyscenesPlanarPrivate * priv;
	GMutex mutex;
};

struct _soyscenesPlanarClass {
	soyscenesSceneClass parent_class;
};

struct _soyscenesRoom {
	soyscenesScene parent_instance;
	soyscenesRoomPrivate * priv;
	struct dxGeom** planes;
	gint planes_length1;
	GMutex mutex;
};

struct _soyscenesRoomClass {
	soyscenesSceneClass parent_class;
};

struct _soyscenesTDSide {
	soyscenesScene parent_instance;
	soyscenesTDSidePrivate * priv;
	GeeLinkedList* tdbodies;
	GeeHashMap* plane2ds;
};

struct _soyscenesTDSideClass {
	soyscenesSceneClass parent_class;
};

struct _soySGK2PNGConverter {
	GTypeInstance parent_instance;
	volatile int ref_count;
	soySGK2PNGConverterPrivate * priv;
};

struct _soySGK2PNGConverterClass {
	GTypeClass parent_class;
	void (*finalize) (soySGK2PNGConverter *self);
};

struct _soytexturesTexture {
	GObject parent_instance;
	soytexturesTexturePrivate * priv;
	gboolean translucent;
	guchar* texels;
	guchar* mipmaps;
	gboolean updated;
};

struct _soytexturesTextureClass {
	GObjectClass parent_class;
	void (*enable) (soytexturesTexture* self);
	void (*disable) (soytexturesTexture* self);
};

struct _soytexturesBumpmap {
	soytexturesTexture parent_instance;
	soytexturesBumpmapPrivate * priv;
};

struct _soytexturesBumpmapClass {
	soytexturesTextureClass parent_class;
};

typedef enum  {
	IO_ERROR_FILE_NOT_FOUND,
	IO_ERROR_READ_ERROR
} IOError;
#define IO_ERROR io_error_quark ()
typedef enum  {
	MEMORY_ERROR_OUT_OF_MEMORY
} MemoryError;
#define MEMORY_ERROR memory_error_quark ()
struct _soytexturesCubemap {
	soytexturesTexture parent_instance;
	soytexturesCubemapPrivate * priv;
};

struct _soytexturesCubemapClass {
	soytexturesTextureClass parent_class;
};

struct _soytexturesHeightmap {
	soytexturesTexture parent_instance;
	soytexturesHeightmapPrivate * priv;
};

struct _soytexturesHeightmapClass {
	soytexturesTextureClass parent_class;
};

struct _soyIteratorWrapper {
	GObject parent_instance;
	soyIteratorWrapperPrivate * priv;
};

struct _soyIteratorWrapperClass {
	GObjectClass parent_class;
};

struct _soywidgetsWidget {
	GObject parent_instance;
	soywidgetsWidgetPrivate * priv;
	gint width;
	gint height;
	gboolean resized;
};

struct _soywidgetsWidgetClass {
	GObjectClass parent_class;
	void (*add) (soywidgetsWidget* self, soywidgetsContainer* parent);
	void (*remove) (soywidgetsWidget* self);
	void (*render) (soywidgetsWidget* self, gint x, gint y, gint width, gint height);
	void (*resize) (soywidgetsWidget* self, gint x, gint y, gint width, gint height);
};

struct _soywidgetsContainer {
	soywidgetsWidget parent_instance;
	soywidgetsContainerPrivate * priv;
	GeeLinkedList* children;
	GMutex mutex;
};

struct _soywidgetsContainerClass {
	soywidgetsWidgetClass parent_class;
	void (*resize_children) (soywidgetsContainer* self, gint x, gint y, gint width, gint height);
};

struct _soywidgetsBranch {
	soywidgetsContainer parent_instance;
	soywidgetsBranchPrivate * priv;
	gchar* name;
	gboolean collapsed;
	soywidgetsContainer* parent;
};

struct _soywidgetsBranchClass {
	soywidgetsContainerClass parent_class;
};

struct _soywidgetsCanvas {
	soywidgetsWidget parent_instance;
	soywidgetsCanvasPrivate * priv;
	gint alignWidth;
	gint alignHeight;
	gfloat aspect;
	gint marginTop;
	gint marginLeft;
	gint marginRight;
	gint marginBottom;
	GLuint vbuffer;
	GLuint ibuffer;
};

struct _soywidgetsCanvasClass {
	soywidgetsWidgetClass parent_class;
};

struct _soywidgetsHBox {
	soywidgetsContainer parent_instance;
	soywidgetsHBoxPrivate * priv;
};

struct _soywidgetsHBoxClass {
	soywidgetsContainerClass parent_class;
};

struct _soywidgetsScroller {
	soywidgetsContainer parent_instance;
	soywidgetsScrollerPrivate * priv;
	soywidgetsContainer* parent;
	soyatomsSize* scrollbarSize;
	soyatomsPosition* scrollPosition;
	gint scrollbarThickness;
	gboolean drag;
	gfloat xstartdrag;
	gfloat ystartdrag;
	gfloat xpos_startdrag;
	gfloat ypos_startdrag;
};

struct _soywidgetsScrollerClass {
	soywidgetsContainerClass parent_class;
	void (*motion_handler) (soywidgetsScroller* self, soyeventsMotion* e);
	void (*scroll_handler) (soywidgetsScroller* self, soyeventsScroll* e);
};

struct _soywidgetsHScroll {
	soywidgetsScroller parent_instance;
	soywidgetsHScrollPrivate * priv;
};

struct _soywidgetsHScrollClass {
	soywidgetsScrollerClass parent_class;
};

struct _soywidgetsProjector {
	soywidgetsWidget parent_instance;
	soywidgetsProjectorPrivate * priv;
};

struct _soywidgetsProjectorClass {
	soywidgetsWidgetClass parent_class;
};

struct _soywidgetsVBox {
	soywidgetsContainer parent_instance;
	soywidgetsVBoxPrivate * priv;
};

struct _soywidgetsVBoxClass {
	soywidgetsContainerClass parent_class;
};

struct _soywidgetsVScroll {
	soywidgetsScroller parent_instance;
	soywidgetsVScrollPrivate * priv;
};

struct _soywidgetsVScrollClass {
	soywidgetsScrollerClass parent_class;
};

struct _soywidgetsWindow {
	soywidgetsContainer parent_instance;
	soywidgetsWindowPrivate * priv;
};

struct _soywidgetsWindowClass {
	soywidgetsContainerClass parent_class;
};


extern GeeHashMap* soy_loadable;
GType soy_materials_material_get_type (void) G_GNUC_CONST;
extern soymaterialsMaterial* soy_default_material;
void soy_init (void);
GType soy_atoms_area_get_type (void) G_GNUC_CONST;
soyatomsArea* soy_atoms_area_new (gfloat x1, gfloat y1, gfloat x2, gfloat y2);
soyatomsArea* soy_atoms_area_construct (GType object_type, gfloat x1, gfloat y1, gfloat x2, gfloat y2);
void soy_atoms_area_set (soyatomsArea* self, gfloat x1, gfloat y1, gfloat x2, gfloat y2);
gfloat soy_atoms_area_get_x1 (soyatomsArea* self);
void soy_atoms_area_set_x1 (soyatomsArea* self, gfloat value);
gfloat soy_atoms_area_get_y1 (soyatomsArea* self);
void soy_atoms_area_set_y1 (soyatomsArea* self, gfloat value);
gfloat soy_atoms_area_get_x2 (soyatomsArea* self);
void soy_atoms_area_set_x2 (soyatomsArea* self, gfloat value);
gfloat soy_atoms_area_get_y2 (soyatomsArea* self);
void soy_atoms_area_set_y2 (soyatomsArea* self, gfloat value);
GType soy_atoms_axis_get_type (void) G_GNUC_CONST;
soyatomsAxis* soy_atoms_axis_new (gfloat x, gfloat y, gfloat z);
soyatomsAxis* soy_atoms_axis_construct (GType object_type, gfloat x, gfloat y, gfloat z);
void soy_atoms_axis_set (soyatomsAxis* self, gfloat x, gfloat y, gfloat z);
soyatomsAxis* soy_atoms_axis_new_normalize (soyatomsAxis* axis);
soyatomsAxis* soy_atoms_axis_construct_normalize (GType object_type, soyatomsAxis* axis);
gboolean soy_atoms_axis_cmp_eq (GObject* left, GObject* right);
gboolean soy_atoms_axis_cmp_ne (GObject* left, GObject* right);
gfloat soy_atoms_axis_get_x (soyatomsAxis* self);
void soy_atoms_axis_set_x (soyatomsAxis* self, gfloat value);
gfloat soy_atoms_axis_get_y (soyatomsAxis* self);
void soy_atoms_axis_set_y (soyatomsAxis* self, gfloat value);
gfloat soy_atoms_axis_get_z (soyatomsAxis* self);
void soy_atoms_axis_set_z (soyatomsAxis* self, gfloat value);
GType soy_atoms_color_get_type (void) G_GNUC_CONST;
soyatomsColor* soy_atoms_color_new (guchar red, guchar green, guchar blue, guchar alpha);
soyatomsColor* soy_atoms_color_construct (GType object_type, guchar red, guchar green, guchar blue, guchar alpha);
soyatomsColor* soy_atoms_color_new_new4f (gfloat* rgba, int rgba_length1);
soyatomsColor* soy_atoms_color_construct_new4f (GType object_type, gfloat* rgba, int rgba_length1);
soyatomsColor* soy_atoms_color_new_new4ub (guchar* rgba, int rgba_length1);
soyatomsColor* soy_atoms_color_construct_new4ub (GType object_type, guchar* rgba, int rgba_length1);
soyatomsColor* soy_atoms_color_new_load (const gchar* packet);
soyatomsColor* soy_atoms_color_construct_load (GType object_type, const gchar* packet);
soyatomsColor* soy_atoms_color_new_named (const gchar* color);
soyatomsColor* soy_atoms_color_construct_named (GType object_type, const gchar* color);
GType soy_math_operator_get_type (void) G_GNUC_CONST;
soyatomsColor* soy_atoms_color_new_operate (soyatomsColor* left, soyatomsColor* right_color, gfloat right_float, soyMathOperator operator);
soyatomsColor* soy_atoms_color_construct_operate (GType object_type, soyatomsColor* left, soyatomsColor* right_color, gfloat right_float, soyMathOperator operator);
gchar* soy_atoms_color_string (soyatomsColor* self);
gfloat* soy_atoms_color_get4f (soyatomsColor* self, int* result_length1);
void soy_atoms_color_set4f (soyatomsColor* self, gfloat* rgba, int rgba_length1);
guchar* soy_atoms_color_get4ub (soyatomsColor* self, int* result_length1);
GType soy_comparison_get_type (void) G_GNUC_CONST;
gboolean soy_atoms_color_cmp (GObject* left, GObject* right, soyComparison comparison);
guchar soy_atoms_color_get_red (soyatomsColor* self);
void soy_atoms_color_set_red (soyatomsColor* self, guchar value);
guchar soy_atoms_color_get_green (soyatomsColor* self);
void soy_atoms_color_set_green (soyatomsColor* self, guchar value);
guchar soy_atoms_color_get_blue (soyatomsColor* self);
void soy_atoms_color_set_blue (soyatomsColor* self, guchar value);
guchar soy_atoms_color_get_luma (soyatomsColor* self);
void soy_atoms_color_set_luma (soyatomsColor* self, guchar value);
guchar soy_atoms_color_get_alpha (soyatomsColor* self);
void soy_atoms_color_set_alpha (soyatomsColor* self, guchar value);
gchar* soy_atoms_color_get_hex (soyatomsColor* self);
void soy_atoms_color_set_hex (soyatomsColor* self, const gchar* value);
GType soy_atoms_color_colormap_get_type (void) G_GNUC_CONST;
soyatomsColorColormap* soy_atoms_color_get_names (void);
soyatomsColor* soy_atoms_color_colormap_get_color (soyatomsColorColormap* self, const gchar* key);
void soy_atoms_color_colormap_set_color (soyatomsColorColormap* self, const gchar* key, soyatomsColor* v);
guint soy_atoms_color_colormap_get_color_uint (soyatomsColorColormap* self, const gchar* key);
void soy_atoms_color_colormap_set_color_uint (soyatomsColorColormap* self, const gchar* key, guint v);
gboolean soy_atoms_color_colormap_check_type (GObject* v);
soyatomsColorColormap* soy_atoms_color_colormap_new (void);
soyatomsColorColormap* soy_atoms_color_colormap_construct (GType object_type);
GType soy_atoms_face_get_type (void) G_GNUC_CONST;
GType soy_atoms_vertex_get_type (void) G_GNUC_CONST;
soyatomsFace* soy_atoms_face_new (soyatomsVertex* a, soyatomsVertex* b, soyatomsVertex* c);
soyatomsFace* soy_atoms_face_construct (GType object_type, soyatomsVertex* a, soyatomsVertex* b, soyatomsVertex* c);
soyatomsFace* soy_atoms_face_new_with_material (soyatomsVertex* a, soyatomsVertex* b, soyatomsVertex* c, soymaterialsMaterial* material);
soyatomsFace* soy_atoms_face_construct_with_material (GType object_type, soyatomsVertex* a, soyatomsVertex* b, soyatomsVertex* c, soymaterialsMaterial* material);
soyatomsVertex* soy_atoms_face_get (soyatomsFace* self, gint index);
void soy_atoms_face_set (soyatomsFace* self, gint index, soyatomsVertex* value);
gboolean soy_atoms_face_cmp_eq (GObject* left, GObject* right);
gboolean soy_atoms_face_cmp_ne (GObject* left, GObject* right);
soymaterialsMaterial* soy_atoms_face_get_material (soyatomsFace* self);
void soy_atoms_face_set_material (soyatomsFace* self, soymaterialsMaterial* value);
GType soy_atoms_morph_get_type (void) G_GNUC_CONST;
GType soy_bodies_body_get_type (void) G_GNUC_CONST;
GType soy_bodies_mesh_get_type (void) G_GNUC_CONST;
soyatomsMorph* soy_atoms_morph_new (soybodiesMesh* a, soybodiesMesh* b);
soyatomsMorph* soy_atoms_morph_construct (GType object_type, soybodiesMesh* a, soybodiesMesh* b);
soyatomsMorph* soy_atoms_morph_new_with_delta (soybodiesMesh* a, soybodiesMesh* b, gfloat delta);
soyatomsMorph* soy_atoms_morph_construct_with_delta (GType object_type, soybodiesMesh* a, soybodiesMesh* b, gfloat delta);
gfloat soy_atoms_morph_get_delta (soyatomsMorph* self);
void soy_atoms_morph_set_delta (soyatomsMorph* self, gfloat value);
GLfloat* soy_atoms_morph_get_matrix (soyatomsMorph* self);
GType soy_atoms_position_get_type (void) G_GNUC_CONST;
soyatomsPosition* soy_atoms_position_new (gfloat x, gfloat y, gfloat z);
soyatomsPosition* soy_atoms_position_construct (GType object_type, gfloat x, gfloat y, gfloat z);
void soy_atoms_position_set (soyatomsPosition* self, gfloat x, gfloat y, gfloat z);
gboolean soy_atoms_position_cmp_eq (GObject* left, GObject* right);
gboolean soy_atoms_position_cmp_ne (GObject* left, GObject* right);
gfloat soy_atoms_position_get_x (soyatomsPosition* self);
void soy_atoms_position_set_x (soyatomsPosition* self, gfloat value);
gfloat soy_atoms_position_get_y (soyatomsPosition* self);
void soy_atoms_position_set_y (soyatomsPosition* self, gfloat value);
gfloat soy_atoms_position_get_z (soyatomsPosition* self);
void soy_atoms_position_set_z (soyatomsPosition* self, gfloat value);
GType soy_atoms_radius_get_type (void) G_GNUC_CONST;
soyatomsRadius* soy_atoms_radius_new (gfloat length);
soyatomsRadius* soy_atoms_radius_construct (GType object_type, gfloat length);
void soy_atoms_radius_set (soyatomsRadius* self, gfloat length);
gfloat soy_atoms_radius_get_length (soyatomsRadius* self);
void soy_atoms_radius_set_length (soyatomsRadius* self, gfloat value);
GType soy_atoms_rotation_get_type (void) G_GNUC_CONST;
soyatomsRotation* soy_atoms_rotation_new (gfloat alpha, gfloat beta, gfloat gamma);
soyatomsRotation* soy_atoms_rotation_construct (GType object_type, gfloat alpha, gfloat beta, gfloat gamma);
void soy_atoms_rotation_set (soyatomsRotation* self, gfloat alpha, gfloat beta, gfloat gamma);
gboolean soy_atoms_rotation_cmp_eq (GObject* left, GObject* right);
gboolean soy_atoms_rotation_cmp_ne (GObject* left, GObject* right);
gfloat soy_atoms_rotation_get_alpha (soyatomsRotation* self);
void soy_atoms_rotation_set_alpha (soyatomsRotation* self, gfloat value);
gfloat soy_atoms_rotation_get_beta (soyatomsRotation* self);
void soy_atoms_rotation_set_beta (soyatomsRotation* self, gfloat value);
gfloat soy_atoms_rotation_get_gamma (soyatomsRotation* self);
void soy_atoms_rotation_set_gamma (soyatomsRotation* self, gfloat value);
GType soy_atoms_size_get_type (void) G_GNUC_CONST;
soyatomsSize* soy_atoms_size_new (gfloat width, gfloat height, gfloat depth);
soyatomsSize* soy_atoms_size_construct (GType object_type, gfloat width, gfloat height, gfloat depth);
void soy_atoms_size_set (soyatomsSize* self, gfloat width, gfloat height, gfloat depth);
gboolean soy_atoms_size_cmp (GObject* left, GObject* right, soyComparison comparison);
gfloat soy_atoms_size_get_width (soyatomsSize* self);
void soy_atoms_size_set_width (soyatomsSize* self, gfloat value);
gfloat soy_atoms_size_get_height (soyatomsSize* self);
void soy_atoms_size_set_height (soyatomsSize* self, gfloat value);
gfloat soy_atoms_size_get_depth (soyatomsSize* self);
void soy_atoms_size_set_depth (soyatomsSize* self, gfloat value);
GType soy_atoms_vector_get_type (void) G_GNUC_CONST;
soyatomsVector* soy_atoms_vector_new (gfloat x, gfloat y, gfloat z);
soyatomsVector* soy_atoms_vector_construct (GType object_type, gfloat x, gfloat y, gfloat z);
void soy_atoms_vector_set (soyatomsVector* self, gfloat x, gfloat y, gfloat z);
gfloat soy_atoms_vector_dot (soyatomsVector* self, soyatomsVector* other);
soyatomsVector* soy_atoms_vector_cross (soyatomsVector* self, soyatomsVector* other);
void soy_atoms_vector_add (soyatomsVector* self, soyatomsVector* other);
void soy_atoms_vector_subtract (soyatomsVector* self, soyatomsVector* other);
gfloat soy_atoms_vector_magnitude (soyatomsVector* self);
void soy_atoms_vector_normalize (soyatomsVector* self);
gfloat soy_atoms_vector_angle_between (soyatomsVector* self, soyatomsVector* other);
gboolean soy_atoms_vector_cmp_eq (GObject* left, GObject* right);
gboolean soy_atoms_vector_cmp_ne (GObject* left, GObject* right);
gfloat soy_atoms_vector_get_x (soyatomsVector* self);
void soy_atoms_vector_set_x (soyatomsVector* self, gfloat value);
gfloat soy_atoms_vector_get_y (soyatomsVector* self);
void soy_atoms_vector_set_y (soyatomsVector* self, gfloat value);
gfloat soy_atoms_vector_get_z (soyatomsVector* self);
void soy_atoms_vector_set_z (soyatomsVector* self, gfloat value);
soyatomsVertex* soy_atoms_vertex_new (soyatomsPosition* position, soyatomsVector* normal, soyatomsPosition* texcoord, soyatomsVector* tangent);
soyatomsVertex* soy_atoms_vertex_construct (GType object_type, soyatomsPosition* position, soyatomsVector* normal, soyatomsPosition* texcoord, soyatomsVector* tangent);
gboolean soy_atoms_vertex_cmp_eq (GObject* left, GObject* right);
gboolean soy_atoms_vertex_cmp_ne (GObject* left, GObject* right);
soyatomsPosition* soy_atoms_vertex_get_position (soyatomsVertex* self);
void soy_atoms_vertex_set_position (soyatomsVertex* self, soyatomsPosition* value);
soyatomsVector* soy_atoms_vertex_get_normal (soyatomsVertex* self);
void soy_atoms_vertex_set_normal (soyatomsVertex* self, soyatomsVector* value);
soyatomsPosition* soy_atoms_vertex_get_texcoord (soyatomsVertex* self);
void soy_atoms_vertex_set_texcoord (soyatomsVertex* self, soyatomsPosition* value);
soyatomsVector* soy_atoms_vertex_get_tangent (soyatomsVertex* self);
void soy_atoms_vertex_set_tangent (soyatomsVertex* self, soyatomsVector* value);
GType soy_bodies_camera_get_type (void) G_GNUC_CONST;
GType soy_scenes_scene_get_type (void) G_GNUC_CONST;
GType soy_bodies_billboard_get_type (void) G_GNUC_CONST;
soybodiesBillboard* soy_bodies_billboard_new (soyatomsPosition* position, soyatomsSize* size, soymaterialsMaterial* material);
soybodiesBillboard* soy_bodies_billboard_construct (GType object_type, soyatomsPosition* position, soyatomsSize* size, soymaterialsMaterial* material);
soyatomsSize* soy_bodies_billboard_get_size (soybodiesBillboard* self);
void soy_bodies_billboard_set_size (soybodiesBillboard* self, soyatomsSize* value);
soymaterialsMaterial* soy_bodies_billboard_get_material (soybodiesBillboard* self);
void soy_bodies_billboard_set_material (soybodiesBillboard* self, soymaterialsMaterial* value);
soybodiesBody* soy_bodies_body_new (soyatomsPosition* position, GObject* geom_param, gfloat geom_scalar);
soybodiesBody* soy_bodies_body_construct (GType object_type, soyatomsPosition* position, GObject* geom_param, gfloat geom_scalar);
void soy_bodies_body_create_geom (soybodiesBody* self, GObject* geom_param, gfloat geom_scalar);
void soy_bodies_body_set_mass (soybodiesBody* self, gfloat density);
void soy_bodies_body_addForce (soybodiesBody* self, dReal fx, dReal fy, dReal fz);
void soy_bodies_body_addTorque (soybodiesBody* self, dReal fx, dReal fy, dReal fz);
void soy_bodies_body_addRelForce (soybodiesBody* self, dReal fx, dReal fy, dReal fz);
void soy_bodies_body_addRelTorque (soybodiesBody* self, dReal fx, dReal fy, dReal fz);
void soy_bodies_body_addForceAtPos (soybodiesBody* self, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
void soy_bodies_body_addForceAtRelPos (soybodiesBody* self, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
void soy_bodies_body_addRelForceAtPos (soybodiesBody* self, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
void soy_bodies_body_addRelForceRelAtPos (soybodiesBody* self, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
void soy_bodies_body_toggle_immovable (soybodiesBody* self);
gfloat* soy_bodies_body_getPositionf (soybodiesBody* self, int* result_length1);
void soy_bodies_body_add (soybodiesBody* self, const gchar* k, soyscenesScene* v);
void soy_bodies_body_remove (soybodiesBody* self);
void soy_bodies_body_add_extra (soybodiesBody* self);
void soy_bodies_body_remove_extra (soybodiesBody* self);
gfloat soy_bodies_body_pointDepth (soybodiesBody* self, gfloat x, gfloat y, gfloat z);
gfloat soy_bodies_body_volume (soybodiesBody* self);
gint soy_bodies_body_finite (soybodiesBody* self);
void soy_bodies_body_mult_model_matrix (soybodiesBody* self);
void soy_bodies_body_render (soybodiesBody* self, gboolean alpha_stage, soybodiesCamera* camera, gint level);
void soy_bodies_body_calcFogCoords (soybodiesBody* self, GLfloat* vertices, int vertices_length1, gfloat _depth);
GLfloat* soy_bodies_body_packArrays (soybodiesBody* self, GLfloat* position, int position_length1, GLfloat* normal, int normal_length1, GLfloat* texcoord, int texcoord_length1, GLfloat* tangent, int tangent_length1, int* result_length1);
soyatomsVector* soy_bodies_body_getRelPointPos (soybodiesBody* self, soybodiesBody* bodyB);
void soy_bodies_body_renderAxis (soybodiesBody* self);
void soy_bodies_body_calculateTSLV (soybodiesBody* self, GLfloat* vertices, int vertices_length1);
GeeHashMap* soy_bodies_body_get_tags (soybodiesBody* self);
gfloat soy_bodies_body_get_density (soybodiesBody* self);
void soy_bodies_body_set_density (soybodiesBody* self, gfloat value);
soyatomsPosition* soy_bodies_body_get_position (soybodiesBody* self);
void soy_bodies_body_set_position (soybodiesBody* self, soyatomsPosition* value);
soyatomsRotation* soy_bodies_body_get_rotation (soybodiesBody* self);
void soy_bodies_body_set_rotation (soybodiesBody* self, soyatomsRotation* value);
soyatomsVector* soy_bodies_body_get_velocity (soybodiesBody* self);
void soy_bodies_body_set_velocity (soybodiesBody* self, soyatomsVector* value);
gfloat soy_bodies_body_get_col_radius (soybodiesBody* self);
gboolean soy_bodies_body_get_axis (soybodiesBody* self);
void soy_bodies_body_set_axis (soybodiesBody* self, gboolean value);
soyatomsSize* soy_bodies_body_get_axis_size (soybodiesBody* self);
void soy_bodies_body_set_axis_size (soybodiesBody* self, soyatomsSize* value);
GType soy_bodies_box_get_type (void) G_GNUC_CONST;
soybodiesBox* soy_bodies_box_new (soyatomsPosition* position, soyatomsSize* size, soymaterialsMaterial* material);
soybodiesBox* soy_bodies_box_construct (GType object_type, soyatomsPosition* position, soyatomsSize* size, soymaterialsMaterial* material);
soymaterialsMaterial* soy_bodies_box_get_material (soybodiesBox* self);
void soy_bodies_box_set_material (soybodiesBox* self, soymaterialsMaterial* value);
gfloat soy_bodies_box_get_radius (soybodiesBox* self);
void soy_bodies_box_set_radius (soybodiesBox* self, gfloat value);
soyatomsSize* soy_bodies_box_get_size (soybodiesBox* self);
void soy_bodies_box_set_size (soybodiesBox* self, soyatomsSize* value);
soybodiesCamera* soy_bodies_camera_new (soyatomsPosition* position, gfloat radius);
soybodiesCamera* soy_bodies_camera_construct (GType object_type, soyatomsPosition* position, gfloat radius);
void soy_bodies_camera_project (soybodiesCamera* self, GLfloat aspect);
gfloat soy_bodies_camera_get_lens (soybodiesCamera* self);
void soy_bodies_camera_set_lens (soybodiesCamera* self, gfloat value);
gfloat soy_bodies_camera_get_radius (soybodiesCamera* self);
void soy_bodies_camera_set_radius (soybodiesCamera* self, gfloat value);
GType soy_bodies_cylinder_get_type (void) G_GNUC_CONST;
soybodiesCylinder* soy_bodies_cylinder_new (soyatomsPosition* position, gfloat radius, gfloat length, soymaterialsMaterial* material);
soybodiesCylinder* soy_bodies_cylinder_construct (GType object_type, soyatomsPosition* position, gfloat radius, gfloat length, soymaterialsMaterial* material);
soymaterialsMaterial* soy_bodies_cylinder_get_material (soybodiesCylinder* self);
void soy_bodies_cylinder_set_material (soybodiesCylinder* self, soymaterialsMaterial* value);
gfloat soy_bodies_cylinder_get_radius (soybodiesCylinder* self);
void soy_bodies_cylinder_set_radius (soybodiesCylinder* self, gfloat value);
gfloat soy_bodies_cylinder_get_length (soybodiesCylinder* self);
void soy_bodies_cylinder_set_length (soybodiesCylinder* self, gfloat value);
GType soy_bodies_light_get_type (void) G_GNUC_CONST;
GType soy_textures_texture_get_type (void) G_GNUC_CONST;
soybodiesLight* soy_bodies_light_new (soyatomsPosition* position, gfloat size, soytexturesTexture* texture);
soybodiesLight* soy_bodies_light_construct (GType object_type, soyatomsPosition* position, gfloat size, soytexturesTexture* texture);
void soy_bodies_light_off (soybodiesLight* self, GLenum id);
void soy_bodies_light_on (soybodiesLight* self, GLenum id);
soyatomsColor* soy_bodies_light_get_ambient (soybodiesLight* self);
void soy_bodies_light_set_ambient (soybodiesLight* self, soyatomsColor* value);
soyatomsColor* soy_bodies_light_get_diffuse (soybodiesLight* self);
void soy_bodies_light_set_diffuse (soybodiesLight* self, soyatomsColor* value);
soyatomsColor* soy_bodies_light_get_specular (soybodiesLight* self);
void soy_bodies_light_set_specular (soybodiesLight* self, soyatomsColor* value);
gfloat soy_bodies_light_get_radius (soybodiesLight* self);
void soy_bodies_light_set_radius (soybodiesLight* self, gfloat value);
gfloat soy_bodies_light_get_size (soybodiesLight* self);
void soy_bodies_light_set_size (soybodiesLight* self, gfloat value);
soytexturesTexture* soy_bodies_light_get_texture (soybodiesLight* self);
void soy_bodies_light_set_texture (soybodiesLight* self, soytexturesTexture* value);
soybodiesMesh* soy_bodies_mesh_new (soyatomsPosition* position);
soybodiesMesh* soy_bodies_mesh_construct (GType object_type, soyatomsPosition* position);
soyatomsFace* soy_bodies_mesh_get (soybodiesMesh* self, gint index);
void soy_bodies_mesh_set (soybodiesMesh* self, gint index, GObject* value);
GLfloat* soy_bodies_mesh_get_raw_verts (soybodiesMesh* self);
void soy_bodies_mesh_set_raw_verts (soybodiesMesh* self, GLfloat* verts);
soybodiesMesh* soy_bodies_mesh_clone (soybodiesMesh* self);
soyatomsMorph* soy_bodies_mesh_morph (soybodiesMesh* self, soybodiesMesh* variant, gfloat delta);
gint soy_bodies_mesh_get_length (soybodiesMesh* self);
void soy_bodies_mesh_set_length (soybodiesMesh* self, gint value);
GType soy_bodies_portal_get_type (void) G_GNUC_CONST;
soybodiesPortal* soy_bodies_portal_new (soyatomsPosition* position, soyatomsSize* size);
soybodiesPortal* soy_bodies_portal_construct (GType object_type, soyatomsPosition* position, soyatomsSize* size);
soyatomsSize* soy_bodies_portal_get_size (soybodiesPortal* self);
void soy_bodies_portal_set_size (soybodiesPortal* self, soyatomsSize* value);
soybodiesPortal* soy_bodies_portal_get_target (soybodiesPortal* self);
void soy_bodies_portal_set_target (soybodiesPortal* self, soybodiesPortal* value);
GType soy_bodies_sphere_get_type (void) G_GNUC_CONST;
soybodiesSphere* soy_bodies_sphere_new (soyatomsPosition* position, gfloat radius, soymaterialsMaterial* material);
soybodiesSphere* soy_bodies_sphere_construct (GType object_type, soyatomsPosition* position, gfloat radius, soymaterialsMaterial* material);
soymaterialsMaterial* soy_bodies_sphere_get_material (soybodiesSphere* self);
void soy_bodies_sphere_set_material (soybodiesSphere* self, soymaterialsMaterial* value);
gfloat soy_bodies_sphere_get_radius (soybodiesSphere* self);
void soy_bodies_sphere_set_radius (soybodiesSphere* self, gfloat value);
GType soy_controllers_controller_get_type (void) G_GNUC_CONST;
GType soy_controllers_virtual_controller_get_type (void) G_GNUC_CONST;
GType soy_controllers_pathfollower_get_type (void) G_GNUC_CONST;
GType soy_controllers_base_navigator_get_type (void) G_GNUC_CONST;
gpointer soy_controllers_graph_edge_ref (gpointer instance);
void soy_controllers_graph_edge_unref (gpointer instance);
GParamSpec* soy_controllers_graph_param_spec_edge (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void soy_controllers_graph_value_set_edge (GValue* value, gpointer v_object);
void soy_controllers_graph_value_take_edge (GValue* value, gpointer v_object);
gpointer soy_controllers_graph_value_get_edge (const GValue* value);
GType soy_controllers_graph_edge_get_type (void) G_GNUC_CONST;
GType soy_controllers_graph_inode_get_type (void) G_GNUC_CONST;
GType soy_controllers_graph_igraph_get_type (void) G_GNUC_CONST;
soycontrollersBaseNavigator* soy_controllers_base_navigator_new (soyscenesScene* scene, soybodiesBody* controlled, gfloat speed, gfloat fuzziness, soycontrollersgraphIGraph* graph, soyatomsPosition* end, gboolean updates, gboolean paused);
soycontrollersBaseNavigator* soy_controllers_base_navigator_construct (GType object_type, soyscenesScene* scene, soybodiesBody* controlled, gfloat speed, gfloat fuzziness, soycontrollersgraphIGraph* graph, soyatomsPosition* end, gboolean updates, gboolean paused);
void soy_controllers_base_navigator_update_path (soycontrollersBaseNavigator* self);
soyatomsPosition* soy_controllers_base_navigator_get_destination (soycontrollersBaseNavigator* self);
void soy_controllers_base_navigator_set_destination (soycontrollersBaseNavigator* self, soyatomsPosition* value);
gchar* soy_controllers_controller_tp_repr (soycontrollersController* self);
soycontrollersController* soy_controllers_controller_new (void);
soycontrollersController* soy_controllers_controller_construct (GType object_type);
GType soy_controllers_dualshock3_get_type (void) G_GNUC_CONST;
void soy_controllers_dualshock3_show_master (soycontrollersDualshock3* self);
soycontrollersDualshock3* soy_controllers_dualshock3_new (void);
soycontrollersDualshock3* soy_controllers_dualshock3_construct (GType object_type);
GType soy_controllers_grid_navigator_get_type (void) G_GNUC_CONST;
soycontrollersGridNavigator* soy_controllers_grid_navigator_new (soyscenesScene* scene, soybodiesBody* controlled, gfloat speed, gfloat fuzziness, gfloat granularity, soyatomsPosition* end, gboolean updates, gboolean paused);
soycontrollersGridNavigator* soy_controllers_grid_navigator_construct (GType object_type, soyscenesScene* scene, soybodiesBody* controlled, gfloat speed, gfloat fuzziness, gfloat granularity, soyatomsPosition* end, gboolean updates, gboolean paused);
soycontrollersGridNavigator* soy_controllers_grid_navigator_new_with_graph (soyscenesScene* scene, soybodiesBody* controlled, gfloat speed, gfloat fuzziness, soycontrollersgraphIGraph* graph, soyatomsPosition* end, gboolean updates, gboolean paused);
soycontrollersGridNavigator* soy_controllers_grid_navigator_construct_with_graph (GType object_type, soyscenesScene* scene, soybodiesBody* controlled, gfloat speed, gfloat fuzziness, soycontrollersgraphIGraph* graph, soyatomsPosition* end, gboolean updates, gboolean paused);
GType soy_controllers_keyboard_get_type (void) G_GNUC_CONST;
soycontrollersKeyboard* soy_controllers_keyboard_new (void);
soycontrollersKeyboard* soy_controllers_keyboard_construct (GType object_type);
soycontrollersPathfollower* soy_controllers_pathfollower_new (soyscenesScene* scene, soybodiesBody* controlled, gfloat speed, gfloat fuzziness, gboolean paused, GeeIterable* path);
soycontrollersPathfollower* soy_controllers_pathfollower_construct (GType object_type, soyscenesScene* scene, soybodiesBody* controlled, gfloat speed, gfloat fuzziness, gboolean paused, GeeIterable* path);
void soy_controllers_pathfollower_path_finished (soycontrollersPathfollower* self, struct dxBody* body);
void soy_controllers_pathfollower_waypoint_reached (soycontrollersPathfollower* self, struct dxBody* body, soyatomsVector* next_vec, gfloat dist);
void soy_controllers_pathfollower_between_waypoints (soycontrollersPathfollower* self, struct dxBody* body, soyatomsVector* next_vec, gfloat dist);
void soy_controllers_pathfollower_skipped (soycontrollersPathfollower* self, struct dxBody* body);
GeeIterable* soy_controllers_pathfollower_get_path (soycontrollersPathfollower* self);
void soy_controllers_pathfollower_set_path (soycontrollersPathfollower* self, GeeIterable* value);
gfloat soy_controllers_pathfollower_get_speed (soycontrollersPathfollower* self);
void soy_controllers_pathfollower_set_speed (soycontrollersPathfollower* self, gfloat value);
gboolean soy_controllers_pathfollower_get_paused (soycontrollersPathfollower* self);
void soy_controllers_pathfollower_set_paused (soycontrollersPathfollower* self, gboolean value);
gfloat soy_controllers_pathfollower_get_fuzziness (soycontrollersPathfollower* self);
void soy_controllers_pathfollower_set_fuzziness (soycontrollersPathfollower* self, gfloat value);
GType soy_controllers_pointer_get_type (void) G_GNUC_CONST;
void soy_controllers_pointer_motion (soycontrollersPointer* self, gint x, gint y);
soycontrollersPointer* soy_controllers_pointer_new (void);
soycontrollersPointer* soy_controllers_pointer_construct (GType object_type);
soyatomsPosition* soy_controllers_pointer_get_position (soycontrollersPointer* self);
void soy_controllers_pointer_set_position (soycontrollersPointer* self, soyatomsPosition* value);
GType soy_controllers_space_navigator_get_type (void) G_GNUC_CONST;
soycontrollersSpaceNavigator* soy_controllers_space_navigator_new (soyscenesScene* scene, soybodiesBody* controlled, gfloat speed, gfloat fuzziness, gfloat granularity, soyatomsPosition* end, gboolean updates, gboolean paused);
soycontrollersSpaceNavigator* soy_controllers_space_navigator_construct (GType object_type, soyscenesScene* scene, soybodiesBody* controlled, gfloat speed, gfloat fuzziness, gfloat granularity, soyatomsPosition* end, gboolean updates, gboolean paused);
soycontrollersSpaceNavigator* soy_controllers_space_navigator_new_with_graph (soyscenesScene* scene, soybodiesBody* controlled, gfloat speed, gfloat fuzziness, soycontrollersgraphIGraph* graph, soyatomsPosition* end, gboolean updates, gboolean paused);
soycontrollersSpaceNavigator* soy_controllers_space_navigator_construct_with_graph (GType object_type, soyscenesScene* scene, soybodiesBody* controlled, gfloat speed, gfloat fuzziness, soycontrollersgraphIGraph* graph, soyatomsPosition* end, gboolean updates, gboolean paused);
soycontrollersVirtualController* soy_controllers_virtual_controller_new (soyscenesScene* scene);
soycontrollersVirtualController* soy_controllers_virtual_controller_construct (GType object_type, soyscenesScene* scene);
void soy_controllers_virtual_controller_run_controller (soycontrollersVirtualController* self);
void soy_controllers_virtual_controller_unregister_controller (soycontrollersVirtualController* self);
void soy_controllers_virtual_controller_register_controller (soycontrollersVirtualController* self);
gchar* soy_controllers_virtual_controller_tp_repr (soycontrollersVirtualController* self);
gboolean soy_controllers_virtual_controller_get_registered (soycontrollersVirtualController* self);
void soy_controllers_virtual_controller_set_registered (soycontrollersVirtualController* self, gboolean value);
gboolean soy_controllers_virtual_controller_get_finished (soycontrollersVirtualController* self);
GType soy_controllers_wiimote_get_type (void) G_GNUC_CONST;
soycontrollersWiimote* soy_controllers_wiimote_new (void);
soycontrollersWiimote* soy_controllers_wiimote_construct (GType object_type);
guint8 soy_controllers_wiimote_toggle_bit (soycontrollersWiimote* self, guint8 bf, guint8 b);
GType soy_controllers_graph_abstract_graph_get_type (void) G_GNUC_CONST;
soycontrollersgraphAbstractGraph* soy_controllers_graph_abstract_graph_new (soyscenesScene* scene, gfloat radius, soyatomsSize* size);
soycontrollersgraphAbstractGraph* soy_controllers_graph_abstract_graph_construct (GType object_type, soyscenesScene* scene, gfloat radius, soyatomsSize* size);
gboolean* soy_controllers_graph_abstract_graph_check_collisions (soycontrollersgraphAbstractGraph* self, soyatomsPosition* start, soyatomsPosition** ends, int ends_length1, int* result_length1);
soyatomsSize* soy_controllers_graph_abstract_graph_get_size (soycontrollersgraphAbstractGraph* self);
soyscenesScene* soy_controllers_graph_abstract_graph_get_scene (soycontrollersgraphAbstractGraph* self);
gfloat soy_controllers_graph_abstract_graph_get_radius (soycontrollersgraphAbstractGraph* self);
GeeList* soy_controllers_graph_inode_get_edges (soycontrollersgraphINode* self);
soyatomsPosition* soy_controllers_graph_inode_get_position (soycontrollersgraphINode* self);
soycontrollersgraphEdge* soy_controllers_graph_edge_new (gfloat dist, soycontrollersgraphINode* begin, soycontrollersgraphINode* end);
soycontrollersgraphEdge* soy_controllers_graph_edge_construct (GType object_type, gfloat dist, soycontrollersgraphINode* begin, soycontrollersgraphINode* end);
soycontrollersgraphINode* soy_controllers_graph_igraph_get_node (soycontrollersgraphIGraph* self, soyatomsPosition* pos);
soycontrollersgraphINode* soy_controllers_graph_igraph_add_terminal_node (soycontrollersgraphIGraph* self, soyatomsPosition* pos);
gboolean* soy_controllers_graph_igraph_check_collisions (soycontrollersgraphIGraph* self, soyatomsPosition* start, soyatomsPosition** ends, int ends_length1, int* result_length1);
GType soy_controllers_graph_grid_get_type (void) G_GNUC_CONST;
soycontrollersgraphGrid* soy_controllers_graph_grid_new (soyscenesScene* scene, gfloat granularity, soyatomsPosition* center);
soycontrollersgraphGrid* soy_controllers_graph_grid_construct (GType object_type, soyscenesScene* scene, gfloat granularity, soyatomsPosition* center);
soycontrollersgraphGrid* soy_controllers_graph_grid_new__default (soyscenesScene* scene, gfloat granularity, gfloat radius, soyatomsSize* size, soyatomsPosition* center);
soycontrollersgraphGrid* soy_controllers_graph_grid_construct__default (GType object_type, soyscenesScene* scene, gfloat granularity, gfloat radius, soyatomsSize* size, soyatomsPosition* center);
soycontrollersgraphGrid* soy_controllers_graph_grid_new_with_radius (soyscenesScene* scene, gfloat granularity, gfloat radius, soyatomsPosition* center);
soycontrollersgraphGrid* soy_controllers_graph_grid_construct_with_radius (GType object_type, soyscenesScene* scene, gfloat granularity, gfloat radius, soyatomsPosition* center);
soycontrollersgraphGrid* soy_controllers_graph_grid_new_with_size (soyscenesScene* scene, gfloat granularity, soyatomsSize* size, soyatomsPosition* center);
soycontrollersgraphGrid* soy_controllers_graph_grid_construct_with_size (GType object_type, soyscenesScene* scene, gfloat granularity, soyatomsSize* size, soyatomsPosition* center);
soycontrollersgraphINode* soy_controllers_graph_grid_add_terminal_node (soycontrollersgraphGrid* self, soyatomsPosition* pos);
GType soy_controllers_graph__grid_int_node_get_type (void) G_GNUC_CONST;
soycontrollersgraph_gridIntNode* soy_controllers_graph_grid_get_node_with_offset (soycontrollersgraphGrid* self, gint x_offset, gint y_offset);
GType soy_controllers_graph__grid_offset_pair_get_type (void) G_GNUC_CONST;
soycontrollersgraph_gridOffsetPair* soy_controllers_graph_grid_convert_to_offset (soycontrollersgraphGrid* self, soyatomsPosition* pos);
soyatomsPosition* soy_controllers_graph_grid_get_center (soycontrollersgraphGrid* self);
gfloat soy_controllers_graph_grid_get_granularity (soycontrollersgraphGrid* self);
soycontrollersgraph_gridOffsetPair* soy_controllers_graph__grid_offset_pair_new (gint x, gint y);
soycontrollersgraph_gridOffsetPair* soy_controllers_graph__grid_offset_pair_construct (GType object_type, gint x, gint y);
guint soy_controllers_graph__grid_offset_pair_hash (soycontrollersgraph_gridOffsetPair* self);
gint soy_controllers_graph__grid_offset_pair_offset_hash (gint x, gint y);
soycontrollersgraph_gridIntNode* soy_controllers_graph__grid_int_node_new (soycontrollersgraphGrid* graph, soyatomsPosition* pos);
soycontrollersgraph_gridIntNode* soy_controllers_graph__grid_int_node_construct (GType object_type, soycontrollersgraphGrid* graph, soyatomsPosition* pos);
soycontrollersgraph_gridIntNode* soy_controllers_graph__grid_int_node_new_with_OffsetPair (soycontrollersgraphGrid* graph, soycontrollersgraph_gridOffsetPair* offset);
soycontrollersgraph_gridIntNode* soy_controllers_graph__grid_int_node_construct_with_OffsetPair (GType object_type, soycontrollersgraphGrid* graph, soycontrollersgraph_gridOffsetPair* offset);
soycontrollersgraph_gridIntNode* soy_controllers_graph__grid_int_node_new_with_int_offset (soycontrollersgraphGrid* graph, gint x_offset, gint y_offset);
soycontrollersgraph_gridIntNode* soy_controllers_graph__grid_int_node_construct_with_int_offset (GType object_type, soycontrollersgraphGrid* graph, gint x_offset, gint y_offset);
void soy_controllers_graph__grid_int_node_add_connection (soycontrollersgraph_gridIntNode* self, soycontrollersgraphINode* other);
GeeList* soy_controllers_graph__grid_int_node_get_edges (soycontrollersgraph_gridIntNode* self);
guint soy_controllers_graph__grid_int_node_hash (soycontrollersgraph_gridIntNode* self);
gint soy_controllers_graph__grid_int_node_get_x (soycontrollersgraph_gridIntNode* self);
gint soy_controllers_graph__grid_int_node_get_y (soycontrollersgraph_gridIntNode* self);
GType soy_controllers_graph__grid_terminal_node_get_type (void) G_GNUC_CONST;
soycontrollersgraph_gridTerminalNode* soy_controllers_graph__grid_terminal_node_new (soycontrollersgraphGrid* graph, soyatomsPosition* pos, soycontrollersgraph_gridOffsetPair** connected, int connected_length1);
soycontrollersgraph_gridTerminalNode* soy_controllers_graph__grid_terminal_node_construct (GType object_type, soycontrollersgraphGrid* graph, soyatomsPosition* pos, soycontrollersgraph_gridOffsetPair** connected, int connected_length1);
GeeList* soy_controllers_graph__grid_terminal_node_get_edges (soycontrollersgraph_gridTerminalNode* self);
void soy_controllers_graph__grid_terminal_node_add_connection (soycontrollersgraph_gridTerminalNode* self, soycontrollersgraphINode* other);
GType soy_controllers_graph_pathfinder_get_type (void) G_GNUC_CONST;
soycontrollersgraphPathfinder* soy_controllers_graph_pathfinder_new (soyscenesScene* scene, soyatomsPosition* start, soyatomsPosition* end, soycontrollersgraphIGraph* graph);
soycontrollersgraphPathfinder* soy_controllers_graph_pathfinder_construct (GType object_type, soyscenesScene* scene, soyatomsPosition* start, soyatomsPosition* end, soycontrollersgraphIGraph* graph);
GeeList* soy_controllers_graph_pathfinder_get_path (soycontrollersgraphPathfinder* self);
GeeList* soy_controllers_graph_pathfinder_get_optimized_path (soycontrollersgraphPathfinder* self);
soycontrollersgraphINode* soy_controllers_graph_pathfinder_find_closest (soycontrollersgraphPathfinder* self);
GeeList* soy_controllers_graph_pathfinder_find_path (soyscenesScene* scene, soyatomsPosition* begin, soyatomsPosition* end);
GeeList* soy_controllers_graph_pathfinder_find_path_with_graph (soyscenesScene* scene, soyatomsPosition* begin, soyatomsPosition* end, soycontrollersgraphIGraph* graph);
GeeList* soy_controllers_graph_pathfinder_find_optimized_path (soyscenesScene* scene, soyatomsPosition* begin, soyatomsPosition* end, soycontrollersgraphIGraph* graph);
gchar* soy_controllers_graph_pathfinder_tp_repr (soycontrollersgraphPathfinder* self);
GType soy_controllers_graph_space_get_type (void) G_GNUC_CONST;
soycontrollersgraphSpace* soy_controllers_graph_space_new (soyscenesScene* scene, gfloat granularity, soyatomsPosition* center);
soycontrollersgraphSpace* soy_controllers_graph_space_construct (GType object_type, soyscenesScene* scene, gfloat granularity, soyatomsPosition* center);
soycontrollersgraphSpace* soy_controllers_graph_space_new__default (soyscenesScene* scene, gfloat granularity, gfloat radius, soyatomsSize* size, soyatomsPosition* center);
soycontrollersgraphSpace* soy_controllers_graph_space_construct__default (GType object_type, soyscenesScene* scene, gfloat granularity, gfloat radius, soyatomsSize* size, soyatomsPosition* center);
soycontrollersgraphSpace* soy_controllers_graph_space_new_with_radius (soyscenesScene* scene, gfloat granularity, gfloat radius, soyatomsPosition* center);
soycontrollersgraphSpace* soy_controllers_graph_space_construct_with_radius (GType object_type, soyscenesScene* scene, gfloat granularity, gfloat radius, soyatomsPosition* center);
soycontrollersgraphSpace* soy_controllers_graph_space_new_with_size (soyscenesScene* scene, gfloat granularity, soyatomsSize* size, soyatomsPosition* center);
soycontrollersgraphSpace* soy_controllers_graph_space_construct_with_size (GType object_type, soyscenesScene* scene, gfloat granularity, soyatomsSize* size, soyatomsPosition* center);
soycontrollersgraphINode* soy_controllers_graph_space_add_terminal_node (soycontrollersgraphSpace* self, soyatomsPosition* pos);
GType soy_controllers_graph__space_int3_node_get_type (void) G_GNUC_CONST;
soycontrollersgraph_spaceInt3Node* soy_controllers_graph_space_get_node_with_offset (soycontrollersgraphSpace* self, gint x_offset, gint y_offset, gint z_offset);
GType soy_controllers_graph__space_offset_triple_get_type (void) G_GNUC_CONST;
soycontrollersgraph_spaceOffsetTriple* soy_controllers_graph_space_convert_to_offset (soycontrollersgraphSpace* self, soyatomsPosition* pos);
soyatomsPosition* soy_controllers_graph_space_get_center (soycontrollersgraphSpace* self);
gfloat soy_controllers_graph_space_get_granularity (soycontrollersgraphSpace* self);
soycontrollersgraph_spaceOffsetTriple* soy_controllers_graph__space_offset_triple_new (gint x, gint y, gint z);
soycontrollersgraph_spaceOffsetTriple* soy_controllers_graph__space_offset_triple_construct (GType object_type, gint x, gint y, gint z);
gint soy_controllers_graph__space_offset_triple_hash (soycontrollersgraph_spaceOffsetTriple* self);
gint soy_controllers_graph__space_offset_triple_offset_hash (gint x, gint y, gint z);
soycontrollersgraph_spaceInt3Node* soy_controllers_graph__space_int3_node_new (soycontrollersgraphSpace* graph, soyatomsPosition* pos);
soycontrollersgraph_spaceInt3Node* soy_controllers_graph__space_int3_node_construct (GType object_type, soycontrollersgraphSpace* graph, soyatomsPosition* pos);
soycontrollersgraph_spaceInt3Node* soy_controllers_graph__space_int3_node_new_with_OffsetTriple (soycontrollersgraphSpace* graph, soycontrollersgraph_spaceOffsetTriple* offset);
soycontrollersgraph_spaceInt3Node* soy_controllers_graph__space_int3_node_construct_with_OffsetTriple (GType object_type, soycontrollersgraphSpace* graph, soycontrollersgraph_spaceOffsetTriple* offset);
soycontrollersgraph_spaceInt3Node* soy_controllers_graph__space_int3_node_new_with_int_offset (soycontrollersgraphSpace* graph, gint x_offset, gint y_offset, gint z_offset);
soycontrollersgraph_spaceInt3Node* soy_controllers_graph__space_int3_node_construct_with_int_offset (GType object_type, soycontrollersgraphSpace* graph, gint x_offset, gint y_offset, gint z_offset);
void soy_controllers_graph__space_int3_node_add_connection (soycontrollersgraph_spaceInt3Node* self, soycontrollersgraphINode* other);
GeeList* soy_controllers_graph__space_int3_node_get_edges (soycontrollersgraph_spaceInt3Node* self);
guint soy_controllers_graph__space_int3_node_hash (soycontrollersgraph_spaceInt3Node* self);
gint soy_controllers_graph__space_int3_node_get_x (soycontrollersgraph_spaceInt3Node* self);
gint soy_controllers_graph__space_int3_node_get_y (soycontrollersgraph_spaceInt3Node* self);
gint soy_controllers_graph__space_int3_node_get_z (soycontrollersgraph_spaceInt3Node* self);
GType soy_controllers_graph__space_terminal_node_get_type (void) G_GNUC_CONST;
soycontrollersgraph_spaceTerminalNode* soy_controllers_graph__space_terminal_node_new (soycontrollersgraphSpace* graph, soyatomsPosition* pos, soycontrollersgraph_spaceOffsetTriple** connected, int connected_length1);
soycontrollersgraph_spaceTerminalNode* soy_controllers_graph__space_terminal_node_construct (GType object_type, soycontrollersgraphSpace* graph, soyatomsPosition* pos, soycontrollersgraph_spaceOffsetTriple** connected, int connected_length1);
GeeList* soy_controllers_graph__space_terminal_node_get_edges (soycontrollersgraph_spaceTerminalNode* self);
void soy_controllers_graph__space_terminal_node_add_connection (soycontrollersgraph_spaceTerminalNode* self, soycontrollersgraphINode* other);
GType soy_events_button_get_type (void) G_GNUC_CONST;
GType soy_event_type_get_type (void) G_GNUC_CONST;
GType soy_widgets_widget_get_type (void) G_GNUC_CONST;
GType soy_widgets_container_get_type (void) G_GNUC_CONST;
GType soy_widgets_window_get_type (void) G_GNUC_CONST;
soyeventsButton* soy_events_button_dup (const soyeventsButton* self);
void soy_events_button_free (soyeventsButton* self);
void soy_events_button_copy (const soyeventsButton* self, soyeventsButton* dest);
void soy_events_button_destroy (soyeventsButton* self);
GType soy_events_event_get_type (void) G_GNUC_CONST;
GType soy_events_device_get_type (void) G_GNUC_CONST;
GType soy_events_button_press_get_type (void) G_GNUC_CONST;
soyeventsButtonPress* soy_events_button_press_new (void);
soyeventsButtonPress* soy_events_button_press_construct (GType object_type);
gint soy_events_button_press_get_button (soyeventsButtonPress* self);
GType soy_events_button_release_get_type (void) G_GNUC_CONST;
soyeventsButtonRelease* soy_events_button_release_new (void);
soyeventsButtonRelease* soy_events_button_release_construct (GType object_type);
gint soy_events_button_release_get_button (soyeventsButtonRelease* self);
soyeventsDevice* soy_events_device_new_instance (gint detail, gdouble root_x, gdouble root_y, gdouble x, gdouble y);
soyeventsDevice* soy_events_device_construct_instance (GType object_type, gint detail, gdouble root_x, gdouble root_y, gdouble x, gdouble y);
soyeventsDevice* soy_events_device_new (void);
soyeventsDevice* soy_events_device_construct (GType object_type);
gdouble soy_events_device_get_root_x (soyeventsDevice* self);
gdouble soy_events_device_get_root_y (soyeventsDevice* self);
gdouble soy_events_device_get_x (soyeventsDevice* self);
gdouble soy_events_device_get_y (soyeventsDevice* self);
soyeventsEvent* soy_events_event_new (void);
soyeventsEvent* soy_events_event_construct (GType object_type);
GType soy_events_key_press_get_type (void) G_GNUC_CONST;
soyeventsKeyPress* soy_events_key_press_new (void);
soyeventsKeyPress* soy_events_key_press_construct (GType object_type);
gint soy_events_key_press_get_key (soyeventsKeyPress* self);
GType soy_events_key_release_get_type (void) G_GNUC_CONST;
soyeventsKeyRelease* soy_events_key_release_new (void);
soyeventsKeyRelease* soy_events_key_release_construct (GType object_type);
gint soy_events_key_release_get_key (soyeventsKeyRelease* self);
GType soy_events_motion_get_type (void) G_GNUC_CONST;
soyeventsMotion* soy_events_motion_dup (const soyeventsMotion* self);
void soy_events_motion_free (soyeventsMotion* self);
void soy_events_motion_copy (const soyeventsMotion* self, soyeventsMotion* dest);
void soy_events_motion_destroy (soyeventsMotion* self);
GType soy_events_scroll_get_type (void) G_GNUC_CONST;
GType soy_scroll_direction_get_type (void) G_GNUC_CONST;
soyeventsScroll* soy_events_scroll_dup (const soyeventsScroll* self);
void soy_events_scroll_free (soyeventsScroll* self);
void soy_events_scroll_copy (const soyeventsScroll* self, soyeventsScroll* dest);
void soy_events_scroll_destroy (soyeventsScroll* self);
GType soy_events_wiibutton_get_type (void) G_GNUC_CONST;
soyeventsWiibutton* soy_events_wiibutton_dup (const soyeventsWiibutton* self);
void soy_events_wiibutton_free (soyeventsWiibutton* self);
GType soy_fields_field_get_type (void) G_GNUC_CONST;
GType soy_fields_accelerate_get_type (void) G_GNUC_CONST;
soyfieldsAccelerate* soy_fields_accelerate_new (gfloat x, gfloat y, gfloat z);
soyfieldsAccelerate* soy_fields_accelerate_construct (GType object_type, gfloat x, gfloat y, gfloat z);
soyatomsVector* soy_fields_accelerate_get_acceleration (soyfieldsAccelerate* self);
void soy_fields_accelerate_set_acceleration (soyfieldsAccelerate* self, soyatomsVector* value);
GType soy_fields_buoyancy_get_type (void) G_GNUC_CONST;
soyfieldsBuoyancy* soy_fields_buoyancy_new (void);
soyfieldsBuoyancy* soy_fields_buoyancy_construct (GType object_type);
gfloat soy_fields_buoyancy_get_viscosity (soyfieldsBuoyancy* self);
void soy_fields_buoyancy_set_viscosity (soyfieldsBuoyancy* self, gfloat value);
soyfieldsField* soy_fields_field_new (void);
soyfieldsField* soy_fields_field_construct (GType object_type);
gboolean soy_fields_field_apply (soyfieldsField* self);
gboolean soy_fields_field_exert (soyfieldsField* self, soybodiesBody* other);
void soy_fields_field_give (soyfieldsField* self, gint data);
void soy_fields_field_commit (soyfieldsField* self);
GType soy_fields_monopole_get_type (void) G_GNUC_CONST;
soyfieldsMonopole* soy_fields_monopole_new (void);
soyfieldsMonopole* soy_fields_monopole_construct (GType object_type);
gfloat soy_fields_monopole_get_multiplier (soyfieldsMonopole* self);
void soy_fields_monopole_set_multiplier (soyfieldsMonopole* self, gfloat value);
GType soy_fields_shockwave_get_type (void) G_GNUC_CONST;
void soy_fields_shockwave_activate (soyfieldsShockwave* self);
soyfieldsShockwave* soy_fields_shockwave_new (void);
soyfieldsShockwave* soy_fields_shockwave_construct (GType object_type);
gfloat soy_fields_shockwave_get_swvel (soyfieldsShockwave* self);
void soy_fields_shockwave_set_swvel (soyfieldsShockwave* self, gfloat value);
gfloat soy_fields_shockwave_get_energy (soyfieldsShockwave* self);
void soy_fields_shockwave_set_energy (soyfieldsShockwave* self, gfloat value);
gfloat soy_fields_shockwave_get_radius (soyfieldsShockwave* self);
void soy_fields_shockwave_set_radius (soyfieldsShockwave* self, gfloat value);
gfloat soy_fields_shockwave_get_length (soyfieldsShockwave* self);
void soy_fields_shockwave_set_length (soyfieldsShockwave* self, gfloat value);
GType soy_fields_wind_get_type (void) G_GNUC_CONST;
soyfieldsWind* soy_fields_wind_new (void);
soyfieldsWind* soy_fields_wind_construct (GType object_type);
soyatomsVector* soy_fields_wind_get_wind (soyfieldsWind* self);
void soy_fields_wind_set_wind (soyfieldsWind* self, soyatomsVector* value);
gfloat soy_fields_wind_get_viscosity (soyfieldsWind* self);
void soy_fields_wind_set_viscosity (soyfieldsWind* self, gfloat value);
GType soy_joints_joint_get_type (void) G_GNUC_CONST;
GType soy_joints_ball_get_type (void) G_GNUC_CONST;
soyjointsBall* soy_joints_ball_new (soybodiesBody* bodyA, soybodiesBody* bodyB, soyatomsPosition* anchor, soymaterialsMaterial* material);
soyjointsBall* soy_joints_ball_construct (GType object_type, soybodiesBody* bodyA, soybodiesBody* bodyB, soyatomsPosition* anchor, soymaterialsMaterial* material);
soyatomsPosition* soy_joints_ball_get_anchor (soyjointsBall* self);
void soy_joints_ball_set_anchor (soyjointsBall* self, soyatomsPosition* value);
GType soy_joints_fixed_get_type (void) G_GNUC_CONST;
soyjointsFixed* soy_joints_fixed_new (soybodiesBody* bodyA, soybodiesBody* bodyB, soymaterialsMaterial* material);
soyjointsFixed* soy_joints_fixed_construct (GType object_type, soybodiesBody* bodyA, soybodiesBody* bodyB, soymaterialsMaterial* material);
GType soy_joints_hinge_get_type (void) G_GNUC_CONST;
soyjointsHinge* soy_joints_hinge_new (soybodiesBody* bodyA, soybodiesBody* bodyB, soyatomsPosition* anchor, soyatomsAxis* axis, soymaterialsMaterial* material);
soyjointsHinge* soy_joints_hinge_construct (GType object_type, soybodiesBody* bodyA, soybodiesBody* bodyB, soyatomsPosition* anchor, soyatomsAxis* axis, soymaterialsMaterial* material);
void soy_joints_hinge_addTorque (soyjointsHinge* self, dReal torque);
soyatomsPosition* soy_joints_hinge_get_anchor (soyjointsHinge* self);
void soy_joints_hinge_set_anchor (soyjointsHinge* self, soyatomsPosition* value);
soyatomsAxis* soy_joints_hinge_get_axis (soyjointsHinge* self);
void soy_joints_hinge_set_axis (soyjointsHinge* self, soyatomsAxis* value);
GType soy_joints_hinge2_get_type (void) G_GNUC_CONST;
soyjointsHinge2* soy_joints_hinge2_new (soybodiesBody* bodyA, soybodiesBody* bodyB, soyatomsPosition* anchor, soyatomsAxis* axis1, soyatomsAxis* axis2, soymaterialsMaterial* material);
soyjointsHinge2* soy_joints_hinge2_construct (GType object_type, soybodiesBody* bodyA, soybodiesBody* bodyB, soyatomsPosition* anchor, soyatomsAxis* axis1, soyatomsAxis* axis2, soymaterialsMaterial* material);
void soy_joints_hinge2_addTorques (soyjointsHinge2* self, dReal torque1, dReal torque2);
soyatomsPosition* soy_joints_hinge2_get_anchor (soyjointsHinge2* self);
void soy_joints_hinge2_set_anchor (soyjointsHinge2* self, soyatomsPosition* value);
soyatomsAxis* soy_joints_hinge2_get_axis1 (soyjointsHinge2* self);
void soy_joints_hinge2_set_axis1 (soyjointsHinge2* self, soyatomsAxis* value);
soyatomsAxis* soy_joints_hinge2_get_axis2 (soyjointsHinge2* self);
void soy_joints_hinge2_set_axis2 (soyjointsHinge2* self, soyatomsAxis* value);
gfloat soy_joints_hinge2_get_angle (soyjointsHinge2* self);
soyjointsJoint* soy_joints_joint_new (soybodiesBody* bodyA, soybodiesBody* bodyB, soyatomsPosition* anchor, soyatomsAxis* axis1, soyatomsAxis* axis2, soymaterialsMaterial* material);
soyjointsJoint* soy_joints_joint_construct (GType object_type, soybodiesBody* bodyA, soybodiesBody* bodyB, soyatomsPosition* anchor, soyatomsAxis* axis1, soyatomsAxis* axis2, soymaterialsMaterial* material);
void soy_joints_joint_create (soyjointsJoint* self);
void soy_joints_joint_setup (soyjointsJoint* self, soyatomsPosition* anchor, soyatomsAxis* axis1, soyatomsAxis* axis2);
void soy_joints_joint_gen_matrices (soyjointsJoint* self);
void soy_joints_joint_render (soyjointsJoint* self);
void soy_joints_joint_mult_model_matrix (soyjointsJoint* self);
void soy_joints_joint_mult_model_matrix_A (soyjointsJoint* self);
void soy_joints_joint_mult_model_matrix_B (soyjointsJoint* self);
soymaterialsMaterial* soy_joints_joint_get_material (soyjointsJoint* self);
void soy_joints_joint_set_material (soyjointsJoint* self, soymaterialsMaterial* value);
GType soy_joints_piston_get_type (void) G_GNUC_CONST;
soyjointsPiston* soy_joints_piston_new (soybodiesBody* bodyA, soybodiesBody* bodyB, soyatomsPosition* anchor, soyatomsAxis* axis1, soyatomsAxis* axis2, soymaterialsMaterial* material);
soyjointsPiston* soy_joints_piston_construct (GType object_type, soybodiesBody* bodyA, soybodiesBody* bodyB, soyatomsPosition* anchor, soyatomsAxis* axis1, soyatomsAxis* axis2, soymaterialsMaterial* material);
void soy_joints_piston_addTorque (soyjointsPiston* self, dReal torque);
soyatomsPosition* soy_joints_piston_get_anchor (soyjointsPiston* self);
void soy_joints_piston_set_anchor (soyjointsPiston* self, soyatomsPosition* value);
soyatomsAxis* soy_joints_piston_get_axis1 (soyjointsPiston* self);
void soy_joints_piston_set_axis1 (soyjointsPiston* self, soyatomsAxis* value);
soyatomsAxis* soy_joints_piston_get_axis2 (soyjointsPiston* self);
void soy_joints_piston_set_axis2 (soyjointsPiston* self, soyatomsAxis* value);
gfloat soy_joints_piston_get_angle (soyjointsPiston* self);
gfloat soy_joints_piston_get_length (soyjointsPiston* self);
GType soy_joints_plane2_d_get_type (void) G_GNUC_CONST;
soyjointsPlane2D* soy_joints_plane2_d_new (soybodiesBody* bodyA, soybodiesBody* bodyB, soymaterialsMaterial* material);
soyjointsPlane2D* soy_joints_plane2_d_construct (GType object_type, soybodiesBody* bodyA, soybodiesBody* bodyB, soymaterialsMaterial* material);
void soy_joints_plane2_d_setXParam (soyjointsPlane2D* self, gint param, dReal val);
void soy_joints_plane2_d_setYParam (soyjointsPlane2D* self, gint param, dReal val);
void soy_joints_plane2_d_setAngleParam (soyjointsPlane2D* self, gint param, dReal val);
GType soy_joints_slider_get_type (void) G_GNUC_CONST;
soyjointsSlider* soy_joints_slider_new (soybodiesBody* bodyA, soybodiesBody* bodyB, soyatomsAxis* axis, soymaterialsMaterial* material);
soyjointsSlider* soy_joints_slider_construct (GType object_type, soybodiesBody* bodyA, soybodiesBody* bodyB, soyatomsAxis* axis, soymaterialsMaterial* material);
void soy_joints_slider_addForce (soyjointsSlider* self, dReal force);
soyatomsAxis* soy_joints_slider_get_axis (soyjointsSlider* self);
void soy_joints_slider_set_axis (soyjointsSlider* self, soyatomsAxis* value);
gfloat soy_joints_slider_get_length (soyjointsSlider* self);
GType soy_joints_universal_get_type (void) G_GNUC_CONST;
soyjointsUniversal* soy_joints_universal_new (soybodiesBody* bodyA, soybodiesBody* bodyB, soyatomsPosition* anchor, soyatomsAxis* axis1, soyatomsAxis* axis2, soymaterialsMaterial* material);
soyjointsUniversal* soy_joints_universal_construct (GType object_type, soybodiesBody* bodyA, soybodiesBody* bodyB, soyatomsPosition* anchor, soyatomsAxis* axis1, soyatomsAxis* axis2, soymaterialsMaterial* material);
void soy_joints_universal_addTorques (soyjointsUniversal* self, dReal torque1, dReal torque2);
soyatomsPosition* soy_joints_universal_get_anchor (soyjointsUniversal* self);
void soy_joints_universal_set_anchor (soyjointsUniversal* self, soyatomsPosition* value);
soyatomsAxis* soy_joints_universal_get_axis1 (soyjointsUniversal* self);
void soy_joints_universal_set_axis1 (soyjointsUniversal* self, soyatomsAxis* value);
soyatomsAxis* soy_joints_universal_get_axis2 (soyjointsUniversal* self);
void soy_joints_universal_set_axis2 (soyjointsUniversal* self, soyatomsAxis* value);
gfloat* soy_joints_universal_get_angle (soyjointsUniversal* self, int* result_length1);
GType soy_materials_colored_get_type (void) G_GNUC_CONST;
soymaterialsColored* soy_materials_colored_new (const gchar* name);
soymaterialsColored* soy_materials_colored_construct (GType object_type, const gchar* name);
void soy_materials_colored_enable_colors (soymaterialsColored* self);
void soy_materials_colored_enable_shades (soymaterialsColored* self);
soyatomsColor* soy_materials_colored_get_ambient (soymaterialsColored* self);
void soy_materials_colored_set_ambient (soymaterialsColored* self, soyatomsColor* value);
soyatomsColor* soy_materials_colored_get_diffuse (soymaterialsColored* self);
void soy_materials_colored_set_diffuse (soymaterialsColored* self, soyatomsColor* value);
soyatomsColor* soy_materials_colored_get_specular (soymaterialsColored* self);
void soy_materials_colored_set_specular (soymaterialsColored* self, soyatomsColor* value);
soyatomsColor* soy_materials_colored_get_emission (soymaterialsColored* self);
void soy_materials_colored_set_emission (soymaterialsColored* self, soyatomsColor* value);
gint soy_materials_colored_get_shades (soymaterialsColored* self);
void soy_materials_colored_set_shades (soymaterialsColored* self, gint value);
gfloat soy_materials_colored_get_shininess (soymaterialsColored* self);
void soy_materials_colored_set_shininess (soymaterialsColored* self, gfloat value);
gboolean soy_materials_material_render (soymaterialsMaterial* self, gint step, GLvoid* tslvs, dxMatrix3* texmatrix);
soymaterialsMaterial* soy_materials_material_new (void);
soymaterialsMaterial* soy_materials_material_construct (GType object_type);
GLenum* soy_materials_material_get_draw_mode (soymaterialsMaterial* self);
GType soy_materials_textured_get_type (void) G_GNUC_CONST;
soymaterialsTextured* soy_materials_textured_new (const gchar* name, soytexturesTexture* bumpmap, soytexturesTexture* colormap, soytexturesTexture* glowmap);
soymaterialsTextured* soy_materials_textured_construct (GType object_type, const gchar* name, soytexturesTexture* bumpmap, soytexturesTexture* colormap, soytexturesTexture* glowmap);
void soy_materials_textured_enable_bumpmap (soymaterialsTextured* self, gint id, dxMatrix3* texmatrix);
void soy_materials_textured_enable_normalisation_cubemap (soymaterialsTextured* self, gint id, dxMatrix3* texmatrix, GLvoid* tslvs);
void soy_materials_textured_enable_primary_combiner (soymaterialsTextured* self, gint id);
void soy_materials_textured_enable_colormap (soymaterialsTextured* self, gint id, dxMatrix3* texmatrix);
void soy_materials_textured_enable_glowmap (soymaterialsTextured* self, gint id, dxMatrix3* texmatrix);
void soy_materials_textured_disable_texture (gint id, dxMatrix3* texmatrix, soytexturesTexture* texture);
soytexturesTexture* soy_materials_textured_get_bumpmap (soymaterialsTextured* self);
void soy_materials_textured_set_bumpmap (soymaterialsTextured* self, soytexturesTexture* value);
soytexturesTexture* soy_materials_textured_get_colormap (soymaterialsTextured* self);
void soy_materials_textured_set_colormap (soymaterialsTextured* self, soytexturesTexture* value);
soytexturesTexture* soy_materials_textured_get_glowmap (soymaterialsTextured* self);
void soy_materials_textured_set_glowmap (soymaterialsTextured* self, soytexturesTexture* value);
GType soy_materials_wireframed_get_type (void) G_GNUC_CONST;
soymaterialsWireframed* soy_materials_wireframed_new (const gchar* name);
soymaterialsWireframed* soy_materials_wireframed_construct (GType object_type, const gchar* name);
GType soy_net_client_get_type (void) G_GNUC_CONST;
GType soy_net_xmpp_agent_get_type (void) G_GNUC_CONST;
#define SOY_NET_CLIENT_session_init_iq 0
soynetClient* soy_net_client_new (const gchar* usr, const gchar* pwd, const gchar* sjid, const gchar* server, gint port);
soynetClient* soy_net_client_construct (GType object_type, const gchar* usr, const gchar* pwd, const gchar* sjid, const gchar* server, gint port);
void soy_net_client_login (soynetClient* self);
void soy_net_client_connection_handler (soynetClient* self, LmConnection* connection, gboolean success);
void soy_net_client_auth_handler (soynetClient* self, LmConnection* connection, gboolean success);
LmHandlerResult soy_net_client_message_handler (soynetClient* self, LmMessageHandler* handler, LmConnection* connection, LmMessage* m);
LmHandlerResult soy_net_client_iq_handler (soynetClient* self, LmMessageHandler* handler, LmConnection* connection, LmMessage* m);
void soy_net_client_can_done (soynetClient* self, guint stream_id);
void soy_net_client_new_ice_xmpp_stanza (soynetClient* self, guint stream_id);
void soy_net_client_recv (soynetClient* self, NiceAgent* agent, guint stream_id, guint component_id, guint len, const gchar* buf);
void soy_net_client_send_message (soynetClient* self, const gchar* to, const gchar* body);
void soy_net_client_create_window (soynetClient* self);
void soy_net_client_cube (soynetClient* self, gint pos);
void soy_net_client_process_glow (soynetClient* self);
guchar soy_net_client_lerp (soynetClient* self, guchar in, guchar in2, gfloat amt);
GType soy_net_server_get_type (void) G_GNUC_CONST;
gpointer client_data_ref (gpointer instance);
void client_data_unref (gpointer instance);
GParamSpec* param_spec_client_data (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_client_data (GValue* value, gpointer v_object);
void value_take_client_data (GValue* value, gpointer v_object);
gpointer value_get_client_data (const GValue* value);
GType client_data_get_type (void) G_GNUC_CONST;
soynetServer* soy_net_server_new (const gchar* usr, const gchar* pwd, const gchar* server, gint port);
soynetServer* soy_net_server_construct (GType object_type, const gchar* usr, const gchar* pwd, const gchar* server, gint port);
void soy_net_server_connection_handler (soynetServer* self, LmConnection* connection, gboolean success);
void soy_net_server_auth_handler (soynetServer* self, LmConnection* connection, gboolean success);
void soy_net_server_can_done (soynetServer* self, guint stream_id);
LmHandlerResult soy_net_server_iq_handler (soynetServer* self, LmMessageHandler* handler, LmConnection* connection, LmMessage* m);
void soy_net_server_recv (soynetServer* self, NiceAgent* agent, guint stream_id, guint component_id, guint len, const gchar* buf);
ClientData* client_data_new (void);
ClientData* client_data_construct (GType object_type);
GType soy_net_state_get_type (void) G_GNUC_CONST;
soynetState* soy_net_state_dup (const soynetState* self);
void soy_net_state_free (soynetState* self);
extern GeeHashMap* soy_net_xmpp_agent_candidate_type_strs;
extern GeeHashMap* soy_net_xmpp_agent_candidate_type_dict;
soynetXMPPAgent* soy_net_xmpp_agent_new (void);
soynetXMPPAgent* soy_net_xmpp_agent_construct (GType object_type);
void soy_net_xmpp_agent_component_state_changed (soynetXMPPAgent* self, guint p0, guint p1, NiceComponentState p2);
void soy_net_xmpp_agent_initial_binding_request_received (soynetXMPPAgent* self, guint p0);
void soy_net_xmpp_agent_new_candidate (soynetXMPPAgent* self, guint p0, guint p1, const gchar* p2);
void soy_net_xmpp_agent_new_remote_candidate (soynetXMPPAgent* self, guint p0, guint p1, const gchar* p2);
void soy_net_xmpp_agent_new_selected_pair (soynetXMPPAgent* self, guint p0, guint p1, const gchar* p2, const gchar* p3);
void soy_net_xmpp_agent_reliable_transport_writable (soynetXMPPAgent* self, guint p0, guint p1);
void soy_net_xmpp_agent_add_local_candidates (soynetXMPPAgent* self, LmMessageNode* transport, GSList* lcands);
GSList* soy_net_xmpp_agent_get_remote_candidates (soynetXMPPAgent* self, LmMessageNode* transport, guint stream_id);
GType soy_scenes_landscape_get_type (void) G_GNUC_CONST;
soyscenesLandscape* soy_scenes_landscape_new (soytexturesTexture* heightmap, soymaterialsMaterial* mat, gint detail, soyatomsSize* size, soyatomsPosition* position);
soyscenesLandscape* soy_scenes_landscape_construct (GType object_type, soytexturesTexture* heightmap, soymaterialsMaterial* mat, gint detail, soyatomsSize* size, soyatomsPosition* position);
soymaterialsMaterial* soy_scenes_landscape_get_material (soyscenesLandscape* self);
void soy_scenes_landscape_set_material (soyscenesLandscape* self, soymaterialsMaterial* value);
soyatomsPosition* soy_scenes_landscape_get_position (soyscenesLandscape* self);
void soy_scenes_landscape_set_position (soyscenesLandscape* self, soyatomsPosition* value);
soyatomsSize* soy_scenes_landscape_get_size (soyscenesLandscape* self);
void soy_scenes_landscape_set_size (soyscenesLandscape* self, soyatomsSize* value);
soytexturesTexture* soy_scenes_landscape_get_heightmap (soyscenesLandscape* self);
void soy_scenes_landscape_set_heightmap (soyscenesLandscape* self, soytexturesTexture* value);
GType soy_scenes_planar_get_type (void) G_GNUC_CONST;
soyscenesPlanar* soy_scenes_planar_new (gfloat offset, gint step, soymaterialsMaterial* material);
soyscenesPlanar* soy_scenes_planar_construct (GType object_type, gfloat offset, gint step, soymaterialsMaterial* material);
soymaterialsMaterial* soy_scenes_planar_get_material (soyscenesPlanar* self);
void soy_scenes_planar_set_material (soyscenesPlanar* self, soymaterialsMaterial* value);
gfloat soy_scenes_planar_get_scale (soyscenesPlanar* self);
void soy_scenes_planar_set_scale (soyscenesPlanar* self, gfloat value);
GType soy_scenes_room_get_type (void) G_GNUC_CONST;
soyscenesRoom* soy_scenes_room_new (gfloat size);
soyscenesRoom* soy_scenes_room_construct (GType object_type, gfloat size);
soymaterialsMaterial* soy_scenes_room_get_walls (soyscenesRoom* self);
void soy_scenes_room_set_walls (soyscenesRoom* self, soymaterialsMaterial* value);
extern gulong GeomScene;
extern gulong GeomBody;
extern gulong GeomField;
extern gulong GeomLight;
extern gulong GeomGhost;
extern gulong GeomTestRay;
extern gulong GeomIgnored;
extern gint MAX_RENDER_LEVEL;
soyscenesScene* soy_scenes_scene_new (void);
soyscenesScene* soy_scenes_scene_construct (GType object_type);
soybodiesBody* soy_scenes_scene_get (soyscenesScene* self, const gchar* key);
gboolean soy_scenes_scene_has_key (soyscenesScene* self, const gchar* key);
void soy_scenes_scene_set (soyscenesScene* self, const gchar* key, soybodiesBody* value);
gboolean soy_scenes_scene_step (soyscenesScene* self);
void soy_scenes_scene_do_in_step (soyscenesScene* self);
void soy_scenes_scene_render (soyscenesScene* self, GLfloat fov, GLfloat aspect, GLfloat znear, GLfloat zfar, soybodiesCamera* camera, gint level);
void soy_scenes_scene_render_extra (soyscenesScene* self);
void soy_scenes_scene_perspective (GLfloat fovy, GLfloat aspect, GLfloat zNear, GLfloat zFar);
gboolean soy_scenes_scene_check_path_collision (soyscenesScene* self, soyatomsPosition* start, soyatomsPosition* end);
gboolean* soy_scenes_scene_check_collisions (soyscenesScene* self, soyatomsPosition* start, soyatomsPosition** ends, int ends_length1, int* result_length1);
gboolean* soy_scenes_scene_check_collisions_with_radius (soyscenesScene* self, soyatomsPosition* start, soyatomsPosition** ends, int ends_length1, gfloat radius, int* result_length1);
gboolean* soy_scenes_scene_check_collisions_with_size (soyscenesScene* self, soyatomsPosition* start, soyatomsPosition** ends, int ends_length1, soyatomsSize* aabb, int* result_length1);
void soy_scenes_scene_calculateTSLV (soyscenesScene* self, GLfloat* vertices, int vertices_length1);
void soy_scenes_scene_body_distance_squared (gfloat* distances, gfloat* x_positions, gfloat* y_positions, gfloat* z_positions, gfloat x_origin, gfloat y_origin, gfloat z_origin, gint size);
void soy_scenes_scene_body_distance (gfloat* distances, gfloat* x_positions, gfloat* y_positions, gfloat* z_positions, gfloat x_origin, gfloat y_origin, gfloat z_origin, gint size);
guint64 soy_scenes_scene_get_time (soyscenesScene* self);
soyatomsColor* soy_scenes_scene_get_ambient (soyscenesScene* self);
void soy_scenes_scene_set_ambient (soyscenesScene* self, soyatomsColor* value);
soyatomsColor* soy_scenes_scene_get_fog (soyscenesScene* self);
void soy_scenes_scene_set_fog (soyscenesScene* self, soyatomsColor* value);
soyatomsVector* soy_scenes_scene_get_gravity (soyscenesScene* self);
void soy_scenes_scene_set_gravity (soyscenesScene* self, soyatomsVector* value);
gulong soy_scenes_scene_get_length (soyscenesScene* self);
GType soy_textures_cubemap_get_type (void) G_GNUC_CONST;
soytexturesCubemap* soy_scenes_scene_get_skybox (soyscenesScene* self);
void soy_scenes_scene_set_skybox (soyscenesScene* self, soytexturesCubemap* value);
gfloat soy_scenes_scene_get_stepsize (soyscenesScene* self);
void soy_scenes_scene_set_stepsize (soyscenesScene* self, gfloat value);
GLfloat* soy_scenes_scene_get_rotation (soyscenesScene* self, int* result_length1);
void soy_scenes_scene_set_rotation (soyscenesScene* self, GLfloat* value, int value_length1);
soyatomsPosition* soy_scenes_scene_get_position (soyscenesScene* self);
void soy_scenes_scene_set_position (soyscenesScene* self, soyatomsPosition* value);
GType soy_scenes_td_side_get_type (void) G_GNUC_CONST;
soyscenesTDSide* soy_scenes_td_side_new (void);
soyscenesTDSide* soy_scenes_td_side_construct (GType object_type);
void soy_scenes_td_side_set2d (soyscenesTDSide* self, soybodiesBody* body);
void soy_scenes_td_side_unset2d (soyscenesTDSide* self, soybodiesBody* body);
void soy_scenes_td_side_set_vel_x (soyscenesTDSide* self, soybodiesBody* body, gfloat vel);
void soy_scenes_td_side_set_vel_y (soyscenesTDSide* self, soybodiesBody* body, gfloat vel);
soyatomsVector* soy_scenes_td_side_get_tdgravity (soyscenesTDSide* self);
void soy_scenes_td_side_set_tdgravity (soyscenesTDSide* self, soyatomsVector* value);
gpointer soy_sg_k2_png_converter_ref (gpointer instance);
void soy_sg_k2_png_converter_unref (gpointer instance);
GParamSpec* soy_param_spec_sg_k2_png_converter (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void soy_value_set_sg_k2_png_converter (GValue* value, gpointer v_object);
void soy_value_take_sg_k2_png_converter (GValue* value, gpointer v_object);
gpointer soy_value_get_sg_k2_png_converter (const GValue* value);
GType soy_sg_k2_png_converter_get_type (void) G_GNUC_CONST;
soySGK2PNGConverter* soy_sg_k2_png_converter_new (void);
soySGK2PNGConverter* soy_sg_k2_png_converter_construct (GType object_type);
void soy_sg_k2_png_converter_sgk2png (soySGK2PNGConverter* self, guchar* sgk_data, int sgk_data_length1);
guchar* soy_sg_k2_png_converter_get_png (soySGK2PNGConverter* self, int* result_length1);
cairo_status_t soy_sg_k2_png_converter_writefunc (soySGK2PNGConverter* self, guchar* input, int input_length1);
GeeArrayList* soy_sg_k2_png_converter_get_png_data (soySGK2PNGConverter* self);
void soy_sg_k2_png_converter_set_png_data (soySGK2PNGConverter* self, GeeArrayList* value);
GType soy_textures_bumpmap_get_type (void) G_GNUC_CONST;
GQuark io_error_quark (void);
GQuark memory_error_quark (void);
soytexturesBumpmap* soy_textures_bumpmap_new_from_png (const gchar* filename, GError** error);
soytexturesBumpmap* soy_textures_bumpmap_construct_from_png (GType object_type, const gchar* filename, GError** error);
soytexturesBumpmap* soy_textures_bumpmap_new_emboss (soytexturesTexture* texture);
soytexturesBumpmap* soy_textures_bumpmap_construct_emboss (GType object_type, soytexturesTexture* texture);
soyatomsVector* soy_textures_bumpmap_get (soytexturesBumpmap* self, gint index);
void soy_textures_bumpmap_set (soytexturesBumpmap* self, gint index, GObject* value);
soytexturesBumpmap* soy_textures_bumpmap_new (void);
soytexturesBumpmap* soy_textures_bumpmap_construct (GType object_type);
soytexturesCubemap* soy_textures_cubemap_new_pattern (const gchar* name, soyatomsColor** colorArray, int colorArray_length1, gint xScale, gint yScale, gint zScale);
soytexturesCubemap* soy_textures_cubemap_construct_pattern (GType object_type, const gchar* name, soyatomsColor** colorArray, int colorArray_length1, gint xScale, gint yScale, gint zScale);
soytexturesCubemap* soy_textures_cubemap_new (void);
soytexturesCubemap* soy_textures_cubemap_construct (GType object_type);
soytexturesTexture* soy_textures_cubemap_get_up (soytexturesCubemap* self);
void soy_textures_cubemap_set_up (soytexturesCubemap* self, soytexturesTexture* value);
soytexturesTexture* soy_textures_cubemap_get_down (soytexturesCubemap* self);
void soy_textures_cubemap_set_down (soytexturesCubemap* self, soytexturesTexture* value);
soytexturesTexture* soy_textures_cubemap_get_left (soytexturesCubemap* self);
void soy_textures_cubemap_set_left (soytexturesCubemap* self, soytexturesTexture* value);
soytexturesTexture* soy_textures_cubemap_get_right (soytexturesCubemap* self);
void soy_textures_cubemap_set_right (soytexturesCubemap* self, soytexturesTexture* value);
soytexturesTexture* soy_textures_cubemap_get_front (soytexturesCubemap* self);
void soy_textures_cubemap_set_front (soytexturesCubemap* self, soytexturesTexture* value);
soytexturesTexture* soy_textures_cubemap_get_back (soytexturesCubemap* self);
void soy_textures_cubemap_set_back (soytexturesCubemap* self, soytexturesTexture* value);
GType soy_textures_heightmap_get_type (void) G_GNUC_CONST;
soytexturesHeightmap* soy_textures_heightmap_new (void);
soytexturesHeightmap* soy_textures_heightmap_construct (GType object_type);
soytexturesHeightmap* soy_textures_heightmap_new_from_png (const gchar* filename, GError** error);
soytexturesHeightmap* soy_textures_heightmap_construct_from_png (GType object_type, const gchar* filename, GError** error);
gint soy_textures_heightmap_get (soytexturesHeightmap* self, gint index);
void soy_textures_heightmap_set (soytexturesHeightmap* self, gint index, gint value);
soytexturesTexture* soy_textures_texture_new (void);
soytexturesTexture* soy_textures_texture_construct (GType object_type);
soytexturesTexture* soy_textures_texture_new_pattern (const gchar* name, soyatomsColor** colorArray, int colorArray_length1, gint xScale, gint yScale, gint size);
soytexturesTexture* soy_textures_texture_construct_pattern (GType object_type, const gchar* name, soyatomsColor** colorArray, int colorArray_length1, gint xScale, gint yScale, gint size);
soytexturesTexture* soy_textures_texture_new_from_png (const gchar* filename, GError** error);
soytexturesTexture* soy_textures_texture_construct_from_png (GType object_type, const gchar* filename, GError** error);
soytexturesTexture* soy_textures_texture_new_from_svg (const gchar* filename, GError** error);
soytexturesTexture* soy_textures_texture_construct_from_svg (GType object_type, const gchar* filename, GError** error);
soytexturesTexture* soy_textures_texture_new_from_svg_string (guint8* data, int data_length1, GError** error);
soytexturesTexture* soy_textures_texture_construct_from_svg_string (GType object_type, guint8* data, int data_length1, GError** error);
soyatomsColor* soy_textures_texture_get (soytexturesTexture* self, gint index);
void soy_textures_texture_set (soytexturesTexture* self, gint index, GObject* value);
void soy_textures_texture_resize (soytexturesTexture* self, gint c, gint x, gint y);
void soy_textures_texture_update (soytexturesTexture* self, GLenum target);
void soy_textures_texture_bind (soytexturesTexture* self, GLenum target);
void soy_textures_texture_enable (soytexturesTexture* self);
void soy_textures_texture_disable (soytexturesTexture* self);
void soy_textures_texture_load (soytexturesTexture* self, void* _vdata, gint _size);
gint soy_textures_texture_squareup (gint _v);
void soy_textures_texture_surface2rgba (guchar* dst, gint dst_stride, guchar* src, gint src_stride, gint n, gint m);
void soy_textures_texture_generate_palette_color (guchar* dst, gfloat* xs, gfloat c1, gfloat c2, gfloat c3, gfloat c4, gfloat y, gfloat divisor, gfloat bound, gint n);
void soy_textures_texture_generate_lerped_colors (guchar* dst, gfloat* xs, gfloat c1, gfloat c2, gfloat divisor, gint n);
GLfloat* soy_textures_texture_get_animate (soytexturesTexture* self, int* result_length1);
gfloat soy_textures_texture_get_aspect (soytexturesTexture* self);
gint soy_textures_texture_get_channels (soytexturesTexture* self);
void soy_textures_texture_set_channels (soytexturesTexture* self, gint value);
soyatomsSize* soy_textures_texture_get_size (soytexturesTexture* self);
void soy_textures_texture_set_size (soytexturesTexture* self, soyatomsSize* value);
gboolean soy_textures_texture_get_smooth (soytexturesTexture* self);
void soy_textures_texture_set_smooth (soytexturesTexture* self, gboolean value);
gboolean soy_textures_texture_get_wrap (soytexturesTexture* self);
void soy_textures_texture_set_wrap (soytexturesTexture* self, gboolean value);
gchar* soy_keyval_name (guint keyval);
GType soy_iterator_wrapper_get_type (void) G_GNUC_CONST;
soyIteratorWrapper* soy_iterator_wrapper_new (GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, GeeIterator* iter);
soyIteratorWrapper* soy_iterator_wrapper_construct (GType object_type, GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, GeeIterator* iter);
GType soy_widgets_branch_get_type (void) G_GNUC_CONST;
soywidgetsBranch* soy_widgets_branch_new (const gchar* name);
soywidgetsBranch* soy_widgets_branch_construct (GType object_type, const gchar* name);
void soy_widgets_branch_remove_branch (soywidgetsBranch* self, soywidgetsBranch* oldBranch);
void soy_widgets_branch_display (soywidgetsBranch* self);
gfloat soy_widgets_branch_convertY (soywidgetsBranch* self, gfloat y);
GType soy_widgets_canvas_get_type (void) G_GNUC_CONST;
soywidgetsCanvas* soy_widgets_canvas_new (soytexturesTexture* texture);
soywidgetsCanvas* soy_widgets_canvas_construct (GType object_type, soytexturesTexture* texture);
soytexturesTexture* soy_widgets_canvas_get_texture (soywidgetsCanvas* self);
void soy_widgets_canvas_set_texture (soywidgetsCanvas* self, soytexturesTexture* value);
soywidgetsContainer* soy_widgets_container_new (void);
soywidgetsContainer* soy_widgets_container_construct (GType object_type);
void soy_widgets_container_add_child (soywidgetsContainer* self, soywidgetsWidget* child);
gboolean soy_widgets_container_remove_child (soywidgetsContainer* self, soywidgetsWidget* child);
soywidgetsWidget* soy_widgets_container_get (soywidgetsContainer* self, gint index);
void soy_widgets_container_set (soywidgetsContainer* self, gint index, soywidgetsWidget* value);
void soy_widgets_container_remove_at (soywidgetsContainer* self, gint index);
soywidgetsWidget* soy_widgets_container_pop (soywidgetsContainer* self);
void soy_widgets_container_insert (soywidgetsContainer* self, gint index, soywidgetsWidget* child);
void soy_widgets_container_resize_children (soywidgetsContainer* self, gint x, gint y, gint width, gint height);
GType soy_widgets_hbox_get_type (void) G_GNUC_CONST;
soywidgetsHBox* soy_widgets_hbox_new (void);
soywidgetsHBox* soy_widgets_hbox_construct (GType object_type);
GType soy_widgets_scroller_get_type (void) G_GNUC_CONST;
GType soy_widgets_hscroll_get_type (void) G_GNUC_CONST;
soywidgetsHScroll* soy_widgets_hscroll_new (void);
soywidgetsHScroll* soy_widgets_hscroll_construct (GType object_type);
GType soy_widgets_projector_get_type (void) G_GNUC_CONST;
soywidgetsProjector* soy_widgets_projector_new (soybodiesCamera* camera);
soywidgetsProjector* soy_widgets_projector_construct (GType object_type, soybodiesCamera* camera);
soybodiesCamera* soy_widgets_projector_get_camera (soywidgetsProjector* self);
void soy_widgets_projector_set_camera (soywidgetsProjector* self, soybodiesCamera* value);
soywidgetsScroller* soy_widgets_scroller_new (void);
soywidgetsScroller* soy_widgets_scroller_construct (GType object_type);
gboolean soy_widgets_scroller_hit_mouse (soywidgetsScroller* self, gfloat x, gfloat y);
void soy_widgets_scroller_motion_handler (soywidgetsScroller* self, soyeventsMotion* e);
void soy_widgets_scroller_button_press_handler (soywidgetsScroller* self, soyeventsButton* e);
void soy_widgets_scroller_button_release_handler (soywidgetsScroller* self, soyeventsButton* e);
gfloat soy_widgets_scroller_convertY (soywidgetsScroller* self, gfloat y);
void soy_widgets_scroller_scroll_handler (soywidgetsScroller* self, soyeventsScroll* e);
soycontrollersPointer* soy_widgets_scroller_get_controller (soywidgetsScroller* self);
void soy_widgets_scroller_set_controller (soywidgetsScroller* self, soycontrollersPointer* value);
GType soy_widgets_vbox_get_type (void) G_GNUC_CONST;
soywidgetsVBox* soy_widgets_vbox_new (void);
soywidgetsVBox* soy_widgets_vbox_construct (GType object_type);
GType soy_widgets_vscroll_get_type (void) G_GNUC_CONST;
soywidgetsVScroll* soy_widgets_vscroll_new (void);
soywidgetsVScroll* soy_widgets_vscroll_construct (GType object_type);
void soy_widgets_widget_add (soywidgetsWidget* self, soywidgetsContainer* parent);
void soy_widgets_widget_remove (soywidgetsWidget* self);
void soy_widgets_widget_render (soywidgetsWidget* self, gint x, gint y, gint width, gint height);
void soy_widgets_widget_resize (soywidgetsWidget* self, gint x, gint y, gint width, gint height);
soywidgetsWidget* soy_widgets_widget_new (void);
soywidgetsWidget* soy_widgets_widget_construct (GType object_type);
soyatomsSize* soy_widgets_widget_get_size (soywidgetsWidget* self);
void soy_widgets_widget_set_size (soywidgetsWidget* self, soyatomsSize* value);
soywidgetsWindow* soy_widgets_window_new (void);
soywidgetsWindow* soy_widgets_window_construct (GType object_type);
void soy_widgets_window_draw (soywidgetsWindow* self);
gboolean soy_widgets_window_get_resizable (soywidgetsWindow* self);
void soy_widgets_window_set_resizable (soywidgetsWindow* self, gboolean value);
gint soy_widgets_window_get_fps (soywidgetsWindow* self);
const gchar* soy_widgets_window_get_title (soywidgetsWindow* self);
void soy_widgets_window_set_title (soywidgetsWindow* self, const gchar* value);
gboolean soy_widgets_window_get_retitle (soywidgetsWindow* self);
void soy_widgets_window_set_retitle (soywidgetsWindow* self, gboolean value);
soyatomsColor* soy_widgets_window_get_background (soywidgetsWindow* self);
void soy_widgets_window_set_background (soywidgetsWindow* self, soyatomsColor* value);
soyatomsPosition* soy_widgets_window_get_position (soywidgetsWindow* self);
void soy_widgets_window_set_position (soywidgetsWindow* self, soyatomsPosition* value);


G_END_DECLS

#endif
