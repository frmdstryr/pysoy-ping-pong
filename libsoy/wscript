# encoding: utf-8

NAME = 'libsoy'
DATE = 'unreleased'
VERSION = '1.0_beta3'
WEBSITE = 'http://www.pysoy.org/'
LICENSE = '''
    Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013 Copyleft Games Group

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

top = '.'
out = 'build'

def options(opt) :
    opt.load('compiler_c')

    opt.add_option('--vala-target-glib', default='2.32',
                   dest='vala_target_glib', metavar='MAJOR.MINOR',
                   help='Target version of glib for GObject code generation')

    opt.add_option('--with-gtk', default='True', dest='with_gtk',
                   help='Build GTK client module')

    # Unit testing 
    opt.add_option('--runtests', dest='runTests', default=False, action='store_true', help='run unit tests found in tests/')

    # for easier debugging
    opt.add_option('--debug', default='False', dest='debug_mode')

    # force orc.c building if not on x86
    opt.add_option('--generate-c', default="False", dest='generate_c',
                       help='Generate orc.c files or assembly')

    # force usage of build.pysoy.org if on x86
    opt.add_option('--generate-asm', default="True", dest='generate_asm',
                       help='Force asm generation on 32 bit systems')

    opt.load('waf_unit_test')

def configure(conf) :
    # Check for a C compiler, valac, and orcc
    conf.load('compiler_c gas genie orc')

    # Unit testing
    conf.load('waf_unit_test')

    # Write configuration to disk
    conf.define('SOY_NAME', NAME)
    conf.define('SOY_DATE', DATE)
    conf.define('SOY_VERSION', VERSION)
    conf.define('SOY_WEBSITE', WEBSITE)
    conf.define('SOY_LICENSE', LICENSE.replace('\n', '\\n')) # waf bug

    conf.check_cfg(package='dbus-glib-1', uselib_store='DBUS_GLIB',
                   mandatory=True, args='--cflags --libs')
    conf.check_cfg(package='gee-1.0', atleast_version='0.5.0',
                   uselib_store='GEE', mandatory=True, args='--cflags --libs')
    conf.check_cfg(package='librsvg-2.0', atleast_version='2.36.0',
                   uselib_store='RSVG', mandatory=True, args='--cflags --libs')
    conf.check_cfg(package='loudmouth-1.0', atleast_version='1.0',
                   uselib_store='LM', mandatory=True, args='--cflags --libs')
    conf.check_cfg(package='nice', atleast_version='0.1', uselib_store='NICE',
                   mandatory=True, args='--cflags --libs')
    conf.check_cfg(package='bluez', uselib_store='BLUEZ', mandatory=False,
                   args='--cflags --libs')
    if conf.check_cfg(package='glesv1_cm', uselib_store='GL', mandatory=False,
                      args='--cflags --libs') != None :
        conf.env['GLES_AVAILABLE'] = 1
    else:
        conf.check_cfg(package='gl', uselib_store='GL', mandatory=True,
                       args='--cflags --libs')
    conf.check_cfg(package='ode', uselib_store='ODE', mandatory=True,
                   min_version='0.11.1', args='--cflags --libs')
    # Record whether ODE was compiled with single or double precision
    conf.define(('dSINGLE','dDOUBLE')['dDOUBLE' in conf.env['DEFINES_ODE']], 1)

    if conf.options.with_gtk == 'True':
        conf.check_cfg(package='gtk+-3.0', uselib_store='GTK', mandatory=True,
                       args='--cflags --libs')

    # if debug flag is set, add -g to build
    if conf.options.debug_mode == 'True':
        conf.env.append_value('CFLAGS', ['-D', 'DISABLE_ORC'])
        conf.env.append_value('CFLAGS', ['-g'])

    # Set the package to soy conf.env['PACKAGE'] = 'soy'

    # Set platform
    from platform import system; conf.env[system().upper()] = 1

    # Copy necessary configuration options into a variable for Vala
    conf.env.VALA_DEFINES = [
        system().upper(),
        'GLES_AVAILABLE' if conf.env['GLES_AVAILABLE'] else '',
        'dSINGLE' if conf.is_defined('dSINGLE') else 'dDOUBLE',
    ]

    conf.write_config_header ('config.h')

def build(bld) :
    # Defines for .pc
    bld.define('PACKAGE', NAME)
    bld.define('VERSION', VERSION)

    # Install config.h in /usr/local/include/soy-1
    bld.install_files('${PREFIX}/include/soy-1', out + '/config.h')
    bld.recurse('src misc include')

    #if bld.options.with_gtk:
    #    bld.recurse('platforms/gtk')

    # Unit testing
    if bld.options.runTests:
        bld.recurse('tests')
        from waflib.Tools import waf_unit_test
        bld.add_post_fun(waf_unit_test.summary)

